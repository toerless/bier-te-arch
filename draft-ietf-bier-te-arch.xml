<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced.
    An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2205 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2205.xml">
<!ENTITY RFC2212 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2212.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3209 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3209.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4253 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4253.xml">
<!ENTITY RFC4655 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4655.xml">
<!ENTITY RFC5440 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5440.xml">
<!ENTITY RFC7752 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7752.xml">
<!ENTITY RFC8345 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8345.xml">
<!ENTITY RFC8401 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8401.xml">
<!ENTITY RFC8402 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8402.xml">
<!ENTITY RFC8444 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8444.xml">
<!ENTITY RFC5226 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC6241 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml">
<!ENTITY RFC7589 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7589.xml">
<!ENTITY RFC7988 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7988.xml">
<!ENTITY RFC8174 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8253 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8253.xml">
<!ENTITY RFC8279 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8279.xml">
<!ENTITY RFC8296 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8296.xml">
<!ENTITY RFC8402 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8402.xml">


]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
    please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<?rfc iprnotified="no" ?>
<!-- Change to "yes" if someone has disclosed IPR for the draft -->
<!-- end of list of popular I-D processing instructions -->

<rfc ipr="trust200902" docName="draft-ietf-bier-te-arch-12" category="std">
        <front>
                <title abbrev="BIER-TE ARCH">Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
                <author role="editor" fullname="Toerless Eckert" initials="T.T.E." surname="Eckert">
                  <organization abbrev="Futurewei">Futurewei Technologies Inc.</organization>
                  <address>
                    <postal>
                      <street>2330 Central Expy</street>
                      <city>Santa Clara</city>
                      <code>95050</code>
                      <country>USA</country>
                    </postal>
                    <email>tte+ietf@cs.fau.de</email>
                  </address>
                </author>
                <author fullname="Gregory Cauchie" initials="G.C." surname="Cauchie">
                        <organization>Bouygues Telecom</organization>
                        <address>
                                <email>GCAUCHIE@bouyguestelecom.fr</email>
                        </address>
                </author>
                <author fullname="Michael Menth" initials="M.M." surname="Menth">
                        <organization>University of Tuebingen</organization>
                        <address>
                                <email>menth@uni-tuebingen.de</email>
                        </address>
                </author>
                <date month="January" year="2022"/>
                <abstract>
<t> This memo describes per-packet stateless strict and loose path
steered replication and forwarding for "Bit Index Explicit Replication" (BIER, RFC8279) packets.  It is called BIER Tree Engineering (BIER-TE) and
is intended to be used as the path steering mechanism for Traffic Engineering
with BIER.</t>

<t>BIER-TE introduces a new semantic for "bit positions" (BP) that indicate adjacencies,
as opposed to (non-TE) BIER in which BPs indicate "Bit-Forwarding Egress Routers" (BFER).
BIER-TE can leverage BIER forwarding engines with little changes.
Co-existence of BIER and BIER-TE forwarding in the same domain is possible, for example by using
separate BIER "sub-domains" (SDs). Except for the optional routed adjacencies, BIER-TE does not
require a BIER routing underlay, and can therefore operate without depending
on an "Interior Gateway Routing protocol" (IGP).</t>

<t>As it operates on the same per-packet stateless forwarding principles, BIER-TE
can also be a good fit to support multicast path steering in "Segment Routing" (SR) networks.</t>

                </abstract>
        </front>
<middle>

  <section anchor="overview" title="Overview">

<t> BIER-TE is based on architecture, terminology and packet formats with (non-TE) BIER as
described in <xref target="RFC8279"/> and <xref target="RFC8296"/>. This
document describes BIER-TE in the expectation that the reader is familiar
with these two documents.</t>

<t>BIER-TE introduces a new semantic for "bit positions" (BP) that indicate adjacencies,
as opposed to "Bit Index Explicit Replication" (BIER) in which BPs indicate "Bit-Forwarding Egress Routers" (BFER).
With BIER-TE, the "Bit Index Forwarding Table" (BIFT) of each "Bit Forwarding Router" (BFR)
is only populated with BP that are adjacent to the BFR
in the BIER-TE Topology. Other BPs are empty in the BIFT. The BFR replicate
and forwards BIER packets to adjacent BPs that are set in the packet.
BPs are normally also cleared upon forwarding to avoid duplicates and loops.
This is detailed further below.
</t>

<t>BIER-TE can leverage BIER forwarding engines with little or no changes.
It can also co-exist with BIER forwarding in the same domain, for example by using
separate BIER sub-domains. Except for the optional routed adjacencies, BIER-TE does not
require a BIER routing underlay, and can therefore operate without depending
on an "Interior Gateway Routing protocol" (IGP).</t>

<t>As it operates on the same per-packet stateless forwarding principles, BIER-TE
can also be a good fit to support multicast path steering in "Segment Routing" (SR) networks (<xref target="RFC8402"/>).</t>

<t>This document is structured as follows:
<list style="symbols">
    <t><xref target="introduction"/> introduces BIER-TE with two reference
    forwarding examples, followed by an introduction of the new concepts of the BIER-TE
    (overlay) topology and finally a summary of the relationship between BIER and BIER-TE and a discussion of accelerated hardware forwarding.</t>
    <t><xref target="components"/> describes the components of the BIER-TE architecture,
     Flow overlay, BIER-TE layer with the BIER-TE control plane (including the BIER-TE controller) and BIER-TE forwarding plane, and the routing underlay.</t>
    <t><xref target="forwarding"/> specifies the behavior of the BIER-TE forwarding plane with the different type of adjacencies and possible variations of BIER-TE forwarding pseudocode, and finally the mandatory and optional requirements.</t> 
    <t><xref target="controller-ops"/> describes operational considerations for the BIER-TE controller, foremost how the BIER-TE controller can optimize the use of BP by using specific type of BIER-TE adjacencies for different type of topological situations, but also how to assign bits to avoid loops and duplicates (which in BIER-TE does not come for free), and finally how SI, sub-domains and BFR-ids can be managed by a BIER-TE controller, examples and summary.</t>
    <t><xref target="SR"/> concludes the technology specific sections of document by further relating BIER-TE to SR.</t>
</list></t>

<t>Note that related work, <xref target="I-D.ietf-roll-ccast"/>
uses Bloom filters <xref target="Bloom70"/> to represent leaves or edges of the intended delivery tree.  Bloom filters
in general can support larger trees/topologies with fewer addressing bits than explicit BitStrings,
but they introduce the heuristic risk of false positives and cannot clear bits in
the BitString during forwarding to avoid loops. For these reasons, BIER-TE 
uses explicit BitStrings like BIER. The explicit BitStrings of BIER-TE can also
be seen as a special type of Bloom filter, and this is how related work <xref target="ICC"/>
describes it.</t>

<!--  Removed for now by review with Lou Berger

  <section anchor="te" title="BIER-TE and Traffic Engineering (BIER-TE)">

<t>BIER-TE is not a standalone, complete traffic engineering signaling solution such as RSVP with RSVP-TE
extensions (<xref target="RFC2205"/>, <xref target="RFC3209"/>). Instead it is a (non-TE) BIER derived architecture
and forwarding plane that allows to signal "source-routed" paths and replication points without
per-path, per-replication-point state on the transit nodes. This document introduces the name
"Tree Engineering" for BitStrings using this semantic. BIER-TE is therefore more similar to Segment Routing
(SR, (<xref target="RFC8402"/>)) than RSVP-TE. Note that SR does not provide stateless replication point
and receiver set signaling in its packet header.  See <xref target="SR"/> for a more detailed discussion of
BIER-TE and SR.</t>

<t>BIER-TE can be used alone in use cases not requiring bandwidth or buffer resource reservations,
such as high resilient services through dual transmission with path diversity or optimization
of network capacity utilization through calculated paths/trees ("load balancing across non-ECMP paths").
Due to its stateless BIER approach, BIER-TE does not create per-flow/per-tree state on intermedia nodes.</t>

<t>BIER-TE can also be combined with bandwidth and buffer management functions to support 
traffic engineering such as per-flow guaranteed bandwidth and guaranteed latency across BIER-TE
steered paths / trees. Combinations of BIER or BIER-TE with such per-tree/per-flow resource
 guarantees are called BIER-TE. The following paragraphs summarize options and considerations.</t>

<t>In <xref target="components"/> below, the BIER-TE architecture specifies the BIER-TE Controller
as an entity calculating both the BIER-TE topology and desired paths/trees for overlay flows
based on the desired policies. A Path Computation Engine (PCE, see <xref target="RFC4655"/>)
that can calculate the BitString for BIER-TE is an instance of such a BIER-TE Controller.
If the PCE can also perform resource management such as per-flow bandwidth reservations and
 optional latency guarantees, then it becomes a PCE for BIER-TE with traffic engineering.</t>

<t>To support bandwidth guarantees in the forwarding plane, the ingres BIER-TE node
(BFIR) may need to have a per-flow policer if ingressed traffic is not trusted to stay within
its admitted traffic envelope. This is a well understood policy function that can be deployed
without changes to BIER-TE.</t>

<t>If latency guarantees as required as for example by Guaranteed Services (<xref target="RFC2212"/>),
then additional per-hop latency control in the forwarding plane can be required. This can also 
be added to BIER-TE deployments without changes to BIER-TE. Per-hop stateless solutions for this
such as in <xref target="I-D.qiang-detnet-large-scale-detnet"/> would allow to maintain
the per-hop stateless design goal of BIER-TE and expand it into BIER-TE. Per-hop stateful solutions like
per-flow, per-hop shaping may also be beneficial given how BIER-TE eliminates the need for
per-flow, per-hop multicast replication and steering state.</t>

<t>Mechanisms how to combine BIER-TE or BIER with other mechanisms to build BIER-TE are outside
the scope of this document.  See <xref target="I-D.eckert-teas-bier-te-framework"/>.</t>

  </section>

-->
    <section anchor="boilerplate" title="Requirements Language">

<t>
 The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",  "MAY", and "OPTIONAL"
 in this document are to be interpreted as described in BCP 14 <xref target="RFC2119"/>,
 <xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.
</t>

    </section>
</section>

<section anchor="introduction" title="Introduction">

  <section anchor="examples" title="Basic Examples">

<t>BIER-TE forwarding is best introduced with simple examples.</t>

<figure anchor="basic-example" title="BIER-TE basic example">
<artwork align="left"><![CDATA[

BIER-TE Topology:

   Diagram:

                    p5    p6
                  --- BFR3 ---
               p3/    p13     \p7          p15
   BFR1 ---- BFR2              BFR5 ----- BFR6
      p1   p2  p4\    p14     /p10 p11   p12
                  --- BFR4 ---
                    p8    p9

   (simplified) BIER-TE Bit Index Forwarding Tables (BIFT):

   BFR1:   p1  -> local_decap
           p2  -> forward_connected() to BFR2

   BFR2:   p1  -> forward_connected() to BFR1
           p5  -> forward_connected() to BFR3
           p8  -> forward_connected() to BFR4

   BFR3:   p3  -> forward_connected() to BFR2
           p7  -> forward_connected() to BFR5
           p13 -> local_decap

   BFR4:   p4  -> forward_connected() to BFR2
           p10 -> forward_connected() to BFR5
           p14 -> local_decap

   BFR5:   p6  -> forward_connected() to BFR3
           p9  -> forward_connected() to BFR4
           p12 -> forward_connected() to BFR6

   BFR6:   p11 -> forward_connected() to BFR5
           p15 -> local_decap

]]></artwork></figure>

<t>
Consider the simple network in the above BIER-TE overview example picture
with 6 BFRs. p1...p14 are the bit positions used. All BFRs can act as
an ingress BFR (BFIR), BFR1, BFR3, BFR4 and
BFR6 can also be BFERs. Forward_connected() is the name for
adjacencies that are representing subnet adjacencies of the network.
Local_decap() is the name of the adjacency to decapsulate BIER-TE packets and
pass their payload to higher layer processing.
</t>

<t>
Assume a packet from BFR1 should be sent via BFR4 to BFR6. This requires
a BitString (p2,p8,p10,p12,p15). When this packet is examined by BIER-TE
on BFR1, the only bit position from the BitString that is also set in
the BIFT is p2. This will cause BFR1 to send the only copy of the packet
to BFR2. Similarly, BFR2 will forward to BFR4 because of p8, BFR4 to BFR5
because of p10 and BFR5 to BFR6 because of p12. p15 finally makes BFR6 receive
and decapsulate the packet.
</t>

<t>To send in addition to BFR6 via BFR4 also a copy to BFR3, the BitString needs
to be (p2,p5,p8,p10,p12,p13). When this packet is examined by 
BFR2, p5 causes one copy to be sent to BFR3 and p8 one copy to BFR4.
When BFR3 receives the packet, p13 will cause it to receive and decapsulate
the packet.
</t>

<t>If instead the BitString was (p2,p6,p8,p10,p12,p13,p15), the packet
would be copied by BFR5 towards BFR3 because of p6 instead of being copied by 
BFR2 to BFR3 because of p5 in the prior case. This is showing the ability of the shown
BIER-TE Topology to make the traffic pass across any possible path and be
replicated where desired.
</t>

<t>BIER-TE has various options to minimize BP assignments,
many of which are based on assumptions about the required multicast traffic
paths and bandwidth consumption in the network.</t>

<t>The following picture shows a modified example, in which Rtr2 and Rtr5 are
assumed not to support BIER-TE, so traffic has to be unicast encapsulated across
them.  To emphasize non-L2, but routed/tunneled forwarding of BIER-TE packets,
these adjacencies are called "forward_routed". Otherwise, there is no difference
in their processing over the aforementioned "forward_connected" adjacencies.</t>

<t>In addition, bits are saved in the following example by assuming that BFR1 only
needs to be BFIR but not BFER or transit BFR.</t>

<figure anchor="basic-overlay" title="BIER-TE basic overlay example">
<artwork align="left"><![CDATA[

BIER-TE Topology:

   Diagram:

                   p1  p3  p7
                ....> BFR3 <....       p5
        ........                ........>  
   BFR1       (Rtr2)          (Rtr5)      BFR6
        ........                ........>
                ....> BFR4 <....       p6
                   p2  p4  p8

   (simplified) BIER-TE Bit Index Forwarding Tables (BIFT):

   BFR1:   p1  -> forward_routed() to BFR3
           p2  -> forward_routed() to BFR4

   BFR3:   p3  -> local_decap
           p5  -> forward_routed() to BFR6

   BFR4:   p4  -> local_decap
           p6  -> forward_routed() to BFR6

   BFR6:   p5  -> local_decap
           p6  -> local_decap
           p7  -> forward_routed() to BFR3
           p8  -> forward_routed() to BFR4

]]></artwork></figure>

<t>To send a BIER-TE packet from BFR1 via BFR3 to BFR6,
the BitString is (p1,p5). From BFR1 via BFR4 to BFR6
it is (p2,p6). A packet from BFR1 to BFR3,BFR4 and from BFR3
to BFR6 uses (p1,p2,p3,p4,p5). A packet from BFR1 to BFR3,BFR4 and
from BFR4 to BFR6 uses (p1,p2,p3,p4,p6). A packet from BFR1 to BFR4, 
and from BFR4 to BFR6 and from BFR6 to BFR3 uses (p2,p3,p4,p6,p7).
A packet from BFR1 to BFR3, and from BFR3 to BFR6 and from BFR6 to BFR4
uses (p1,p3,p4,p5,p8).</t>

  </section>

  <section anchor="topology" title="BIER-TE Topology and adjacencies">

<t>The key new component in BIER-TE compared to (non-TE) BIER is the BIER-TE topology
as introduced through the two examples in <xref target="examples"/>.
It is used  to control where replication can or should happen and how to
minimize the required number of BP for adjacencies.
</t>

<t>
The BIER-TE Topology consists of the BIFTs of all the BFR and
can also be expressed as a directed graph where the edges are the adjacencies 
between the BFR labelled with the BP used for the adjacency. Adjacencies are
naturally unidirectional.  BP can be reused across multiple adjacencies as long as this does not
lead to undesired duplicates or loops as explained further down in the
text.
</t>

<t>If the BIER-TE topology represents (a subset of) the underlying (layer 2)
topology of the network as shown in the first example, this may be called a "native"
BIER-TE topology. A topology consisting only of "forward_routed" adjacencies as
shown in the second example may be called an "overlay" BIER-TE topology.
A BIER-TE topology with both "forward_connected" and "forward_routed" adjacencies
may be called a "hybrid" BIER-TE topology.</t>

    </section>
    <!-- topology -->


<section anchor="comparison" title="Relationship to BIER">

<t>BIER-TE is designed so that its forwarding plane is a simple extension to the (non-TE) BIER forwarding plane, hence allowing for it to be added to BIER deployments where it can be beneficial.</t>
<t>BIER-TE is also intended as an option to expand the BIER architecture into deployments where (non-TE) BIER  may not be the best fit, such as statically provisioned networks with needs for path steering but without desire for distributed routing protocols.</t>

<t><list style="numbers">
<t>BIER-TE inherits the following aspects from BIER unchanged:
<list style="numbers">
    <t>The fundamental purpose of per-packet signaled packet replication and delivery via a BitString.</t>
    <t>The overall architecture consisting of three layers, flow overlay, BIER(-TE) layer and routing underlay.</t>
    <t>The supportable encapsulations, <xref target="RFC8296"/> or other (future) encapsulations.</t>
    <t>The semantic of all <xref target="RFC8296"/> header elements used by the BIER-TE forwarding plane other than the semantic of the BP in the BitString.</t>
    <t>The BIER forwarding plane, except for how bits have to be cleared during replication.</t>
</list></t>

<t>BIER-TE has the following key changes with respect to BIER:
<list style="numbers">
        <t>In BIER, bits in the BitString of a BIER packet header indicate a BFER and bits in the BIFT indicate the BIER control plane calculated next-hop toward that BFER. In BIER-TE, bits in the BitString of a BIER packet header indicate an adjacency in the BIER-TE topology, and only the BFRs that are the upstream of this adjacency have this bit populated with the adjacency in their BIFT.</t>

    <t>In BIER, the implied reference option for the core part of the BIER layer control plane are the BIER extensions for distributed routing protocols, such as those standardized in ISIS/OSPF extensions for BIER, <xref target="RFC8401"/> and <xref target="RFC8444"/>. The reference option for the core part of the BIER-TE control plane is the BIER-TE controller. Nevertheless, both BIER and BIER-TE BIFT forwarding plane state could equally be populated by any mechanism.</t>
    <t>Assuming the reference options for the control plane,  BIER-TE replaces in-network autonomous path calculation by explicit paths calculated by the BIER-TE controller.</t>
</list></t>

<t>The following elements/functions described in the BIER architecture are not required by the BIER-TE architecture:
<list style="numbers">
    <t>BIRTs are not required on BFRs for BIER-TE when using a BIER-TE controller because the controller can directly populate the BIFTs. In BIER, BIRTs are populated by the distributed routing protocol support for BIER, allowing BFRs to populate their BIFTs locally from their BIRTs. Other BIER-TE control plane  or management plane options may introduce requirements for BIRTs for BIER-TE BFRs.</t>
    <t>The BIER-TE layer forwarding plane does not require BFRs to have a unique BP and therefore also no unique BFR-id. See for example  See <xref target="leaf-bfer"/>.</t>
    <t>Identification of BFRs by the BIER-TE control plane is outside the scope of this specification. Whereas the BIER control plane uses BFR-ids in its BFR to BFR signaling, a BIER-TE controller may choose any form of identification deemed appropriate.</t>
    <t>BIER-TE forwarding does not use the BFR-id field of the BIER packet header.</t>
</list></t>

<t>Co-existence of BIER and BIER-TE in the same network requires the following:
<list style="numbers">
<t>The BIER/BIER-TE packet header needs to allow addressing both BIER and BIER-TE BIFT. Depending on the encapsulation option, the same SD may or may not be reusable across BIER and BIER-TE.  See <xref target="encapsulation"/>. 
In either case, a packet is always only forwarded end-to-end via BIER or via BIER-TE (ships in the nights forwarding).</t>

<t>BIER-TE deployments will have to assign BFR-ids to BFRs and insert them into the BFR-id field of BIER packet headers as BIER does, whenever the deployment uses (unchanged) components developed for BIER that use BFR-id, such as multicast flow overlays or BIER layer control plane elements. See also <xref target="bfr-id"/>.</t>

</list></t>

</list></t>

    </section>

    <section anchor="fwd-comparison" title="Accelerated/Hardware forwarding comparison">

<t>Forwarding of BIER-TE is designed with the intent to easily build/program common forwarding hardware
with BIER.  The pseudocode in <xref target="pseudocode"/> shows how existing 
(non-TE) BIER/BIFT forwarding can be modified to support the REQUIRED BIER-TE forwarding functionality,
by using BIER BIFT's "Forwarding Bit Mask" (F-BM): Only the clearing of bits to avoid duplicate
packets to a BFR's neighbor is skipped in BIER-TE forwarding because it is not necessary
and could not be done when using BIER F-BM.</t>

<t>Whether to use BIER or BIER-TE forwarding is simply a choice of the mode
of the BIFT indicated by the packet (BIER or BIER-TE BIFT). This is determined
by the BFR configuration for the encapsulation, see <xref target="encapsulation"/>.</t>

  </section>
  <!-- fwd-comparison -->

</section>
<!-- overview -->

  <section anchor="components" title="Components">

<t>BIER-TE can be thought of being constituted from the same three
layers as BIER: The "multicast flow overlay", the "BIER layer" and
the "routing underlay".  The following picture also shows how the "BIER layer"
is constituted from the "BIER-TE forwarding plane" and the "BIER-TE control plane"
represent by the "BIER-TE Controller".</t>

<figure anchor="architecture" title="BIER-TE architecture">
<artwork align="left"><![CDATA[
                <------BGP/PIM----->
   |<-IGMP/PIM->  multicast flow   <-PIM/IGMP->|
                     overlay

       BIER-TE  [BIER-TE Controller] <=> [BIER-TE Topology]
       control     ^      ^     ^
       plane      /       |      \   BIER-TE control protocol
                 |        |       |  e.g. YANG/Netconf/RestConf
                 |        |       |       PCEP/...
                 v        v       v
 Src -> Rtr1 -> BFIR-----BFR-----BFER -> Rtr2 -> Rcvr

                |<----------------->|
              BIER-TE forwarding plane

                |<- BIER-TE domain->|

              |<--------------------->|
                  Routing underlay
]]></artwork></figure>

    <section anchor="flow-overlay" title="The Multicast Flow Overlay">

<t>The Multicast Flow Overlay has the same role as described for BIER
in <xref target="RFC8279"/>, Section 4.3. See also <xref target="engineered-bitstrings"/>.</t>

    </section>
    <!-- flow-overlay -->

    <section anchor="control-plane" title="The BIER-TE Control Plane">

<t>In the (non-TE) BIER architecture <xref target="RFC8279"/>, the BIER control
plane is not explicitly separated from the BIER forwarding plane,
but instead their functions are summarized together in Section 4.2.
Example standardized options for the BIER control plane include
ISIS/OSPF extensions for BIER, <xref target="RFC8401"/> and <xref target="RFC8444"/>.</t>

<t>For BIER-TE, the control plane includes at minimum the following functionality.</t>

<t><list style="numbers">
    <t>During initial provisioning of the network and/or during modifications of its topology and/or services: protocols and/or procedures to establish BIER-TE BIFTs:
    <list style="numbers">
        <t>Determine the desired BIER-TE topology for a BIER-TE sub-domains: the native and/or overlay adjacencies that are assigned to BPs.</t>
        <t>Determine the per-BFR BIFT from the BIER-TE topology.</t>
        <t>Optionally assign BFR-ids to BFIRs for later insertion into BIER-TE headers on BFIRs. Alternatively, bfir-id in BIER packet headers may be managed solely by the flow overlay layer and/or be unused.</t>
        <t>Install/update the BIFTs into the BFRs and optionally BFR-ids into BFIRs.</t>
    </list></t>
    <t>During operations of the network: Protocols and/or procedures to support creation/change/removal of overlay flows on BFIRs:
    <list style="numbers">
        <t>Process the BIER-TE requirements for the multicast overlay flow: BFIR and BFERs of the flow as well as policies for the path selection of the flow.</t>
        <t>Determine the BitStrings and optionally Entropy.</t>
        <t>Install state on the BFIR to impose the desired BIER packet header(s) for packets of the overlay flow.</t>
        <t>Install the necessary state on the BFERs to decapsulate the BIER packet header and properly dispatch its payload.</t>
    </list></t>
</list></t>

      <section anchor="bier-te-controller" title="The BIER-TE Controller">

<t>Notwithstanding other options, this architecture describes the
BIER control plane as shown in <xref target="architecture"/> to consists of:
    <list style="symbols">
        <t>A single centralized BIER-TE controller.</t>
        <t>Data-models and protocols to communicate between controller and BFRs in step 1, such as YANG/Netconf/RestConf.</t>
        <t>Protocols to communicate between controller and BFIR in step 2, such as BIER-TE extensions for <xref target="RFC5440"/>.</t>
    </list>
</t>

<t>The (non-TE) BIER control plane could equally be implemented without any active dynamic components
by an operator via CLI on the BFRs. In that case, operator configured local policy on the BFIR would have to
determine how to set the appropriate BIER header fields.  The BIER-TE control plane could also be decentralized
and/or distributed, but this document does not consider any additional protocols and/or procedures
which would then be necessary to coordinate its entities to achieve the above described functionality.</t>

      <section anchor="topology-discovery" title="BIER-TE Topology discovery and creation">

<t>Step 1.1 includes network topology discovery and BIER-TE topology creation. The latter describes the process by which a Controller determines which routers are to be configured as BFR and the adjacencies between them.</t>

<t>In statically managed networks, such as in industrial environments, both discovery and creation can be a manual/offline process.</t>

<t>In other networks, topology discovery may rely on protocols including extending a "Link-State-Protocol" (LSP) based IGP into the BIER-TE controller itself, <xref target="RFC7752"/> (BGP-LS) or <xref target="RFC8345"/> (YANG topology) as well as BIER-TE specific methods, for example via <xref target="I-D.ietf-bier-te-yang"/>. These options are non-exhaustive.</t>

<t>Dynamic creation of the BIER-TE topology can be as easy as mapping the network topology 1:1 to the BIER-TE topology by assigning a BP for every network subnet adjacency. In larger networks, it likely involves more complex policy and optimization decisions including how to minimize the number of BP required and how to assign BP across different BitStrings to minimize the number of duplicate packets across links when delivering an overlay flow to BFER using different SIs/BitStrings. These topics are discussed in <xref target="controller-ops"/>.</t>

<t>When the BIER-TE topology is determined, the BIER-TE Controller then pushes
the BitPositions/adjacencies to the BIFT of the BFRs. On each BFR only those SI:BitPositions
are populated that are adjacencies to other BFRs in the BIER-TE topology.</t>

<t>Communications between the BIER-TE Controller and BFRs (beside topology discovery)
is ideally via standardized protocols and data-models such as Netconf/RestConf/YANG/PCEP.
Vendor-specific CLI on the BFRs is also an option (as in many other SDN
solutions lacking definition of standardized data model).</t>

      </section>

      <section anchor="engineered-bitstrings" title="Engineered Trees via BitStrings">

<t>In BIER, the same set of BFER in a single sub-domain is always encoded as the same BitString.
In BIER-TE, the BitString used to reach the same set of BFER in the same sub-domain can be
different for different overlay flows because the BitString encodes the paths towards the BFER,
so the BitStrings from different BFIR to the same set of BFER will often be different. 
Likewise, the BitString from the same BFIR to the same set of BFER can be different for different overlay
flows for policy reasons such as shortest path trees, Steiner trees (minimum cost trees),
diverse path trees for redundancy and so on.</t>

<t>See also <xref target="I-D.ietf-bier-multicast-http-response"/> for an application
leveraging BIER-TE engineered trees.</t>

      </section>

      <section anchor="changes-in-topo" title="Changes in the network topology">

<t>If the network topology changes (not failure based) so that adjacencies
that are assigned to bit positions are no longer needed, the BIER-TE Controller can
re-use those bit positions for new adjacencies.  First, these bit positions
need to be removed from any BFIR flow state and BFR BIFT state, then they
can be repopulated, first into BIFT and then into the BFIR.</t>

      </section>
      <!-- changes-in-topo -->

      <section anchor="failures" title="Link/Node Failures and Recovery">

<t>When link or nodes fail or recover in the topology, BIER-TE could quickly
respond with FRR procedures such as <xref target="I-D.eckert-bier-te-frr"/>, the details of which are out of scope for this document. It can also more slowly react by
recalculating the BitStrings of affected multicast flows. This reaction is
slower than the FRR procedure because the BIER-TE Controller needs to receive
link/node up/down indications, recalculate the desired BitStrings and push
them down into the BFIRs. With FRR, this is all performed locally on a BFR
receiving the adjacency up/down notification.</t>

      </section>
      <!-- failures -->

    </section>
    <!-- control-plane -->
</section>
    <!-- XXX -->

    <section anchor="forwarding-plane" title="The BIER-TE Forwarding Plane">

<t>[RFC-editor Q: "constitutes of" / "consists of" / "composed from..." ???]</t>
<t>The BIER-TE Forwarding Plane constitutes of the following components:
    <list style="numbers">
        <t>On BFIR, imposition of BIER header for packets from overlay flows. This is driven by a combination of state established by the BIER-TE control plane and/or the multicast flow overlay as explained in <xref target="flow-overlay"/>.</t>
        <t>On BFR (including BFIR and BFER), forwarding/replication of BIER packets according to their BitString as explained below and optionally Entropy. Processing of other BIER header fields such as DSCP is outside the scope of this document.</t>
        <t>On BFER, removal of BIER header and dispatching of the payload according to state created by the BIER-TE control plane and/or overlay layer.</t>
    </list>
</t>

<t>When the BIER-TE Forwarding Plane receives a packet, it simply looks
up the bit positions that are set in the BitString of the packet in the
BIFT that was populated by the BIER-TE Controller.
For every BP that is set in the BitString, and that has one or
more adjacencies in the BIFT, a copy is made according to the type
of adjacencies for that BP in the BIFT. Before sending any copy, the
BFR clears all BPs in the BitString of the packet for which the
BFR has one or more adjacencies in the BIFT, except when the adjacency
indicates "DoNotClear" (DNC, see <xref target="forward-connected"/>). This is done to inhibit that packets can loop. Because DNC raises the risk of packets looping with inmakes it easier to </t>

    </section>
    <!-- forwarding-plane -->

    <section anchor="routing-underlay" title="The Routing Underlay">

<t>For forward_connected() adjacencies, BIER-TE is sending BIER packets to directly connected
BIER-TE neighbors as L2 (unicasted) BIER packets without requiring a
routing underlay. For forward_routed() adjacencies, BIER-TE forwarding encapsulates
a copy of the BIER packet so that it can be delivered by the forwarding plane
of the routing underlay to the routable destination address indicated in the adjacency.
See <xref target="forward-routed"/> for the adjacency definition.</t>

<t>BIER relies on the routing underlay to calculate paths towards BFERs and derive
next-hop BFR adjacencies for those paths. This commonly relies on BIER specific extensions
to the routing protocols of the routing underlay but may also be established
by a controller. In BIER-TE, the next-hops of a packet are determined by the BitString
through the BIER-TE Controller established adjacencies on the BFR for the BPs of the BitString.
There is thus no need for BFER specific routing underlay extensions to forward BIER packets with
BIER-TE semantics.</t>

<t>Encapsulation parameters can be provisioned by the BIER-TE controller into 
the forward_connected() or forward_routed() adjacencies directly without relying on a routing underlay.
</t>

<t>If the BFR intends to support FRR for BIER-TE, then the BIER-TE
forwarding plane needs to receive fast adjacency up/down notifications:
Link up/down or neighbor up/down, e.g. from BFD. Providing these notifications
is considered to be part of the routing underlay in this document.</t>

    </section>
    <!-- routing-underlay -->

    <section anchor="te-considerations" title="Traffic Engineering Considerations">

<t>Traffic Engineering (<xref target="I-D.ietf-teas-rfc3272bis"/>)
provides performance optimization of operational IP networks while utilizing
 network resources economically and
reliably.  The key elements needed to effect TE are policy, path steering
and resource management. These elements require support at the
control/controller level and within the forwarding plane.</t>

<t>Policy decisions are made within the BIER-TE control plane, i.e., within
BIER-TE Controllers.  Controllers use policy when composing BitStrings 
and BFR BIFT state. The mapping of user/IP traffic to specific
BitStrings/BIER-TE flows is made based on policy. The specific details of
BIER-TE policies and how a controller uses them are out of scope of this
document.</t>

<t>Path steering is supported via the definition of a BitString.  BitStrings
used in BIER-TE are composed based on policy and resource management
considerations.  For example, when composing BIER-TE BitStrings, a Controller must take
into account the resources available at each BFR and for each BP
when it is providing congestion-loss-free services such as 
Rate Controlled Service Disciplines <xref target="RCSD94"/>.  Resource availability 
could be provided for example via routing protocol information, but
may also be obtained via a BIER-TE control protocol such as Netconf or
any other protocol commonly used by a Controller to understand the resources
of the network it operates on.  The
resource usage of the BIER-TE traffic admitted by the BIER-TE controller
can be solely tracked on the BIER-TE Controller based on local accounting
as long as no forward_routed() adjacencies are used (see <xref target="forward-connected"/> for the definition
of forward_routed() adjacencies).  When forward_routed() adjacencies are used,
the paths selected by the underlying routing protocol need to be tracked as well.</t>

<t>Resource management has implications on the forwarding plane beyond
the BIER-TE defined steering of packets.  This includes allocation of
buffers to guarantee the worst case requirements of admitted RCSD traffic
and potentially policing and/or rate-shaping mechanisms, typically done
via various forms of queuing.  This level of resource control,
while optional, is important in networks that wish to
support congestion management policies to control or regulate the offered
traffic to deliver different levels of service and alleviate congestion
problems, or those networks that wish to control latencies experienced by
specific traffic flows.</t>


  </section>
    <!-- te-considerations -->

  </section>
  <!-- components -->

  <section anchor="forwarding" title="BIER-TE Forwarding">

    <section anchor="btft" title="The Bit Index Forwarding Table (BIFT)">

<t>The BIFT exists in every BFR. For every
sub-domain in use, it is a table indexed by SI:bit position and is populated by the
BIER-TE control plane. Each index can be empty or contain a list of one or more
adjacencies.</t>

<t>Like BIER, BIER-TE can support multiple sub-domains, each with a separate BIFT.</t>

<t>In <xref target="RFC8279"/>, Figure 2, indices into the BIFT are both SI:BitString and
BFR-id, where BitString is indicating a BP: BFR-id = SI * 2^BSL + BP. 
As shown in <xref target="adjacencies"/>, in BIER-TE, only SI:BP are used as indices into a BIFT because they identify adjacencies
and not BFR.</t>

<figure anchor="adjacencies" title="BIFT adjacencies">
<artwork align="left"><![CDATA[
  ------------------------------------------------------------------
  | Index:          |  Adjacencies:                                |
  | SI:bit position  |  <empty> or one or more per entry           |
  ==================================================================
  | 0:1             |  forward_connected(interface,neighbor{,DNC}) |
  ------------------------------------------------------------------
  | 0:2             |  forward_connected(interface,neighbor{,DNC}) |
  |                 |  forward_connected(interface,neighbor{,DNC}) |
  ------------------------------------------------------------------
  | 0:3             |  local_decap({VRF})                          |
  ------------------------------------------------------------------
  | 0:4             |  forward_routed({VRF,}l3-neighbor)           |
  ------------------------------------------------------------------
  | 0:5             |  <empty>                                     |
  ------------------------------------------------------------------
  | 0:6             |  ECMP({adjacency1,...adjacencyN}, seed)      |
  ------------------------------------------------------------------
  ...
  | BitStringLength |  ...                                         |
  ------------------------------------------------------------------
                   Bit Index Forwarding Table

]]></artwork></figure>

<t>The BIFT is programmed into the data plane of BFRs by the BIER-TE
Controller and used to forward packets, according to the rules
specified in the BIER-TE Forwarding Procedures.</t>

<t>Note that a BIFT index (SI:BP) may be populated in the BIFT of more
than one BFR. See <xref target="rings"/> for an example of how a BIER-TE controller
could assign BPs to (logical) adjacencies shared across multiple BFRs,
<xref target="leaf-bfer"/> for an example of assigning the same BP to different
adjacencies, and <xref target="reuse"/> for guidelines regarding re-use of BPs across different 
adjacencies.</t>


<t>{VRF} indicates the Virtual Routing and Forwarding context into which
the BIER payload is to be delivered. This is optional and depends
on the multicast flow overlay.</t>

    </section>
    <!-- btft -->

    <section anchor="atypes" title="Adjacency Types">

      <section anchor="forward-connected" title="Forward Connected">

<t>A "forward_connected" adjacency is towards a directly connected
BFR neighbor using an interface address of that BFR on the connecting
interface. A forward_connected() adjacency does not route packets
but only L2 forwards them to the neighbor.</t>

<t>Packets sent to an adjacency with "DoNotClear" (DNC) set in the
BIFT MUST NOT have the bit position for that adjacency cleared when the
BFR creates a copy for it. The bit position will still be cleared for
copies of the packet made towards other adjacencies. This can be
used for example in ring topologies as explained in <xref target="rings"/>.</t>

<t>For protection against loops from misconfiguration (see <xref target="loops"/>),
DNC is only permissible for forward_connected() adjacencies. No need or benefit
of DNC for other type of adjacencies was identified and their risk was not analyzed.</t>

      </section>
      <!-- forward-connected -->

      <section anchor="forward-routed" title="Forward Routed">

<t>A "forward_routed" adjacency is an adjacency towards a BFR that
uses a (tunneling) encapsulation which will cause the packet to be
forwarded by the routing underlay toward the adjacent BFR.  This can
leverage any feasible encapsulation, such as MPLS or tunneling over IP/IPv6,
as long as the BIER-TE packet can be identified as a payload. This identification
can either rely on the BIER/BIER-TE co-existence mechanisms described in
<xref target="encapsulation"/>, or by explicit support for a BIER-TE payload type
in the tunneling encapsulation.</t>

<t>"forward_routed" adjacencies are necessary to pass BIER-TE traffic across
non BIER-TE capable routers or to minimize the number of required BP by
tunneling over (BIER-TE capable) routers on which neither replication nor
path-steering is desired, or simply to leverage path redundancy and FRR of the
routing underlay towards the next BFR. They may also be useful to a 
multi-subnet adjacent BFR to leverage the routing underlay ECMP 
independent of BIER-TE ECMP (<xref target="forward-ecmp"/>).</t>

      </section>
      <!-- forward-routed -->

      <section anchor="forward-ecmp" title="ECMP">

<t>(non-TE) BIER ECMP is tied to the BIER BIFT processing semantic and are therefore
not directly usable with BIER-TE.</t>

<t>A BIER-TE "Equal Cost Multipath" (ECMP) adjacency has a list of two or
more non-ECMP adjacencies and an optional seed parameter. When a BIER-TE packet is copied
onto such an ECMP adjacency, an implementation specific so-called hash function
will select one out of the list's adjacencies to which the packet is forwarded.
If the packet's encapsulation contains an entropy field, the entropy field SHOULD
be respected; two packets with the same value of the entropy field SHOULD be sent on
the same adjacency.  The seed parameter allows to design
hash functions that are easy to implement at high speed without running into
polarization issues across multiple consecutive ECMP hops. See <xref target="ecmp"/>
for more explanations.</t>

      </section>
      <!-- forward-ecmp -->

      <section anchor="forward-local" title="Local Decap(sulation)">

<t>A "local_decap" adjacency passes a copy of the payload of
the BIER-TE packet to the protocol ("NextProto") within the BFR (IPv4/IPv6, Ethernet,...) responsible for
that payload according to the packet header fields.
A local_decap() adjacency turns the BFR into a BFER for matching
packets. Local_decap() adjacencies require the BFER to support
routing or switching for NextProto to determine how to further
process the packet.</t>

      </section>
      <!-- forward-local -->

    </section>
    <!-- atypes -->

    <section anchor="encapsulation" title="Encapsulation / Co-existence with BIER">

<t>Specifications for BIER-TE encapsulation are outside the scope of this document.
This section gives explanations and guidelines.</t>

<t>Like <xref target="RFC8279"/>, handling of "Maximum Transmission Unit" (MTU)
limitations is outside the scope of this document and instead part of the
BIER-TE packet encapsulation and/or flow overlay. See for example <xref target="RFC8296"/>, Section 3.
It applies equally to BIER-TE as it does to BIER.</t>

<t>Because a BFR needs to interpret the BitString of a BIER-TE packet differently
from a (non-TE) BIER packet, it is necessary to distinguish BIER from BIER-TE packets.
In the BIER encapsulation <xref target="RFC8296"/>, 
the BIFT-id field of the packet indicates the BIFT of the packet. BIER and BIER-TE can
therefore be run simultaneously, when the BIFT-id address space is shared across
BIER BIFT and BIER-TE BIFT. Partitioning the BIFT-id address space is subject
to BIER-TE/BIER control plane procedures.</t>

<t>When <xref target="RFC8296"/> is used for BIER with MPLS, BIFT-id address ranges
can be dynamically allocated from MPLS label space only for the set of actually
used SD:BSL BIFT.  This allows to also allocate non-overlapping label ranges for BIFT-id
that are to be used with BIER-TE BIFTs.</t>

<t>With MPLS, it is also possible to reuse the
same SD space for both BIER-TE and BIER, so that the same SD has both a 
BIER BIFT and corresponding range of BIFT-ids and a disjoint BIER-TE BIFT and non-overlapping range of BIFT-ids.</t>

<t>When a fixed mapping from BSL, SD, SI is used without specifically
distinguishing BIER and BIER-TE, such as proposed for non-MPLS forwarding with
<xref target="RFC8296"/> in <xref target="I-D.ietf-bier-non-mpls-bift-encoding"/> 
revision 04, section 5., then it is necessary to allocate disjoint SDs to BIER
and BIER-TE BIFT so that both can be addressed by the BIFT-ids. The encoding
proposed in section 6. of the same document does not statically encode BSL
or SD into the BIFT-id, but allows for a mapping, and hence could provide for
the same freedom as when MPLS is being used (same or different SD for BIER/BIER-TE).</t>

<t>"forward_routed" requires an encapsulation that permits to direct unicast encapsulated BIER-TE packets to a specific interface address on a target BFR. With MPLS encapsulation, this can
simply be done via a label stack with that addresses label as the top label - followed
by the label assigned to the (BSL,SD,SI) BitString.
With non-MPLS encapsulation, some form of IP encapsulation would be required (for example IP/GRE).
</t>

<t>The encapsulation used for "forward_routed" adjacencies can equally support
existing advanced adjacency information such as "loose source routes" via e.g. MPLS
label stacks or appropriate header extensions (e.g. for IPv6).</t>

    </section>
    <!-- encapsulation -->

  <section anchor="pseudocode" title="BIER-TE Forwarding Pseudocode">

<t>
The following pseudocode, <xref target="simple-pseudocode-picture"/>, for BIER-TE forwarding is based
on the (non-TE) BIER forwarding pseudocode of <xref target="RFC8279"/>, section 6.5 with one modification.</t>

<figure anchor="simple-pseudocode-picture" title="BIER-TE Forwarding Pseudocode for required functions, based on BIER Pseudocode">
<artwork align="left"><![CDATA[
   void ForwardBitMaskPacket_withTE (Packet)
   {
       SI=GetPacketSI(Packet);
       Offset=SI*BitStringLength;
       for (Index = GetFirstBitPosition(Packet->BitString); Index ;
            Index = GetNextBitPosition(Packet->BitString, Index)) {
           F-BM = BIFT[Index+Offset]->F-BM;
           if (!F-BM) continue;                            [3]
           BFR-NBR = BIFT[Index+Offset]->BFR-NBR;
           PacketCopy = Copy(Packet);
           PacketCopy->BitString &= F-BM;                  [2]
           PacketSend(PacketCopy, BFR-NBR);
           // The following must not be done for BIER-TE:
           // Packet->BitString &= ~F-BM;                  [1]
       }
   }
]]></artwork></figure>

<t>In step [2], the F-BM is used to clear bit(s) in PacketCopy.
This step exists in both BIER and BIER-TE, but the F-BMs need to be
populated differently for BIER-TE than for BIER for the desired clearing.</t>

<t>In BIER, multiple bits of a BitString can have the same BFR-NBR.
When a received packets BitString has more than one of those bits set,
the BIER replication logic has to avoid that more than one PacketCopy is 
sent to that BFR-NBR ([1]). Likewise, the PacketCopy sent to a BFR-NBR
must clear all bits in its BitString that are not routed across BFR-NBR.
This protects against BIER replication on any possible further
BFR to create duplicates ([2]).</t>

<t>To solve both [1] and [2] for BIER, the F-BM of each bit index needs to have all
bits set that this BFR wants to route across BFR-NBR. [2] clears
all other bits in PacketCopy->BitString, and [1] clears those bits from
Packet->BitString after the first PacketCopy.</t>

<t>In BIER-TE, a BFR-NBR is an adjacency, forward_connected, forward_routed
or local_decap. There is no need for [2] to suppress duplicates in the way
BIER does because in general, different BP would never have the same
adjacency. If a BIER-TE controller actually finds some optimization in
which this would be desirable, then the controller is also responsible to
ensure that only one of those bits is set in any Packet->BitString, unless
 the controller explicitly wants for duplicates to be created.</t>

<t>For BIER-TE, F-BM is handled as follows:
<list style="numbers">
  <t>The F-BM of all bits without an adjacency has all bits clear. This
  will cause [3] to skip further processing of such a bit.</t>
  <t>All bits with an adjacency (with DNC flag clear) have an F-BM
  that has only those bits set for which this BFR does not have an adjacency.
  This causes [2] to clear all bits from PacketCopy->BitString for which this
  BFR does have an adjacency.</t>
  <t>[1] is not performed for BIER-TE. All bit clearing required by BIER-TE
  is performed by [2].</t>
</list></t>

<t>This Forwarding Pseudocode can support the REQUIRED BIER-TE forwarding
functions (see <xref target="requirements"/>), forward_connected,
forward_routed() and local decap, but not the RECOMMENDED functions DNC flag
and multiple adjacencies per bit nor the OPTIONAL function, ECMP adjacencies.
The DNC flag cannot be supported when using only [1] to mask bits.</t>

<t>The modified and expanded Forwarding Pseudocode in <xref target="pseudocode-picture"/> specifies how to
support all BIER-TE forwarding functions (required, recommended and optional):
<list style="symbols">
    <t>This pseudocode eliminates per-bit F-BM, therefore reducing the size of BIFT state by BitStringLength^2*SI and eliminating the need for per-packet-copy bit string operation except for adjacencies with the DNC flag set:
    <list style="symbols">
        <t>AdjacentBits[SI] are bit positions with a non-empty list of adjacencies in this BFR BIFT. This can be computed whenever the BIER-TE Controller updates (add/removes) adjacencies in the BIFT.</t>
        <t>The BFR needs to create packet copies for these adjacent bits when they are set in the packets BitString. This set of bits is calculated in PktAdjacentBits.</t>
        <t>All bit positions to which the BFR creates copies have to be cleared in packet copies to avoid loops. This is done by masking the bit string of the packet with ~AdjacentBits[SI]. When an adjacency has DNC set, this bit position is set again only for the packet copy towards that bit position.</t>
    </list></t>
    <t>BIFT entries may contain more than one adjacency in support of specific configurations such as <xref target="hubnspoke"/>. The code therefore includes a loop over these adjacencies.</t>
    <t>The ECMP adjacency is shown. Its parameters are a seed and a ListOfAdjacencies from which one is picked.</t>
    <t>The forward_local, forward_routed, local_decap() adjacencies are shown with their parameters.</t>
</list></t>

<figure anchor="pseudocode-picture" title="Complete BIER-TE Forwarding Pseudocode for required, recommended and optional functions">
<artwork align="left"><![CDATA[
 void ForwardBitMaskPacket_withTE (Packet)
 {
     SI = GetPacketSI(Packet);
     Offset = SI * BitStringLength;
     // Determine adjacent bits in the Packets BitString
     PktAdjacentBits = Packet->BitString & AdjacentBits[SI];

     // Clear adjacent bits in Packet header to avoid loops
     Packet->BitString &= ~AdjacentBits[SI];

     // Loop over PktAdjacentBits to create packet copies 
     for (Index = GetFirstBitPosition(PktAdjacentBits); Index ;
          Index = GetNextBitPosition(PktAdjacentBits, Index)) {
         for adjacency in BIFT[Index+Offset]->Adjacencies { 
             if(adjacency.type == ECMP(ListOfAdjacencies,seed) ) {
                 I = ECMP_hash(sizeof(ListOfAdjacencies),
                               Packet->Entropy,seed);
                 adjacency = ListOfAdjacencies[I];
             }
             PacketCopy = Copy(Packet);
             switch(adjacency.type) {
                 case forward_connected(interface,neighbor,DNC):
                     if(DNC)
                         PacketCopy->BitString |= 1<<(Index-1);
                     SendToL2Unicast(PacketCopy,interface,neighbor);

                 case forward_routed({VRF,}l3-neighbor):
                     SendToL3(PacketCopy,{VRF,}l3-neighbor);

                 case local_decap({VRF},neighbor):
                     DecapBierHeader(PacketCopy);
                     PassTo(PacketCopy,{VRF,}Packet->NextProto);
             }
         }
     }
 }
]]></artwork></figure>



  </section>
  <!-- pseudocode -->

    <section anchor="basic" title="Basic BIER-TE Forwarding Example">

<t>[RFC Editor: remove this section.]</t>

<t>THIS SECTION TO BE REMOVED IN RFC BECAUSE IT WAS SUPERCEEDED BY SECTION 1.1 EXAMPLE - UNLESS REVIEWERS CHIME IN AND EXPRESS DESIRE TO KEEP THIS ADDITIONAL EXAMPLE SECTION. ALVARO RETANA DID NOT MIND ANOTHER EXAMPLE.</t>

<t>Step-by-step example of basic BIER-TE forwarding. This example does not
use ECMP or forward_routed() adjacencies nor does it try to minimize
the number of required BitPositions for the topology.</t>

<figure anchor="forwarding-example" title="BIER-TE Forwarding Example">
<artwork align="left"><![CDATA[
               [BIER-TE Controller]
                /       |       \
               v        v        v
           .                          .
        | p13   p1 |                  .
        +- BFIR2 --+          |       .
        |  .       | p2   p6  |       .   LAN2
        |  .       +-- BFR3 --+       .   |
        |  .       |          |  p7  p11  |
   Src -+  .                  +-- BFER1 --+
        |  .       | p3   p8  |       .   |
        |  .       +-- BFR4 --+       .   +-- Rcv1
        |  .       |          |       .   |
        |  .       |                  .
        | p14  p4  |                  .
        +- BFIR1 --+          |       .
        |  .       +-- BFR5 --+ p10  p12  |
      LAN1 .       | p5   p9  +-- BFER2 --+
           .                  |       .   +-- Rcv2
           .                          .   |
           .                          .   LAN3
           .                          .
       IP  |..... BIER-TE network.....| IP
]]></artwork></figure>

<t>pXX indicate the BitPositions number
assigned by the BIER-TE Controller to adjacencies in the
BIER-TE topology. For example, p9 is the adjacency towards BFR5
on the LAN connecting to BFER2.</t>

<figure anchor="example-adjacencies" title="BIER-TE Forwarding Example Adjacencies">
<artwork align="left"><![CDATA[
   BIFT BFIR2:
     p13: local_decap
      p2: forward_connected(BFR3)

   BIFT BFR3:
      p1: forward_connected(BFIR2)
      p7: forward_connected(BFER1)
      p8: forward_connected(BFR4)

   BIFT BFER1:
     p11: local_decap
      p6: forward_connected(BFR3)
      p8: forward_connected(BFR4)
]]></artwork></figure>

<t>...and so on.</t>

<t>For example, we assume that some multicast traffic seen on LAN1 needs to be sent via BIER-TE by BFIR2 towards Rcv1 and Rcv2.  The BIER-TE Controller determines it wants it to pass this traffic across the following paths:</t>

<figure anchor="example-paths" title="BIER-TE Forwarding Example Paths">
<artwork align="left"><![CDATA[
              -> BFER1 ---------------> Rcv1
 BFIR2 -> BFR3
              -> BFR4 -> BFR5 -> BFER2 -> Rcv2
]]></artwork></figure>

<t>These paths equal to the following BitString:
p2, p5, p7, p8, p10, p11, p12.</t>

<t>This BitString is assigned by BFIR2 to the example multicast traffic received from LAN1.</t>

<t>Then BFIR2 forwards this multicast traffic with BIER-TE based on that BitString.
The BIFT of BFIR2 has only p2 and p13 populated. Only p2 is in the BitString and this is
an adjacency towards BFR3. BFIR2 therefore clears p2 in the BitString
 and sends a copy towards BFR2.</t>

<t>BFR3 sees a BitString of p5,p7,p8,p10,p11,p12.
For those BPs, it has only adjacencies for p7,p8. It creates a copy of the
packet to BFER1 (due to p7) and one to BFR4 (due to p8). It
clears both p7 and p8 before sending.</t>

<t>BFER1 sees a BitString of p5,p10,p11,p12.
For those BPs, it only has an adjacency for p11.
p11 is a "local_decap" adjacency installed
by the BIER-TE Controller to receive a copy of the BIER
packet - dispose of the BIER header and pass the payload to IP multicast.
IP multicast will then forward the packet out to LAN2 because
it did receive PIM or IGMP joins on LAN2 for the traffic. </t>

<t>Further processing of the packet in BFR4, BFR5 and BFER2
accordingly.</t>

    </section>
    <!-- basic -->

<section anchor="requirements" title="BFR Requirements for BIER-TE forwarding">

<t>BFR MUST support to configure the BIFT of sub-domains so that they use 
BIER-TE forwarding rules instead of (non-TE) BIER forwarding rules.  Every BP in the BIFT MUST support to have
zero or one adjacency. Forwarding MUST support the adjacency types forward_connected() with clear DNC flag,
forward_routed() and local_decap.
As explained in <xref target="pseudocode"/>, these REQUIRED BIER-TE forwarding functions
can be implementeded via the same Forwarding Pseudocode as BIER forwarding except for
one modification (skipping one masking with F-BM).</t>

<t>BIER-TE forwarding SHOULD support forward_connected() adjacencies with a set DNC flag,
as this is highly useful to save bits in rings (see <xref target="rings"/>).</t>

<t>BIER-TE forwarding SHOULD support more than one adjacency on a bit.
This allows to save bits in hub&amp;spoke scenarios (see <xref target="hubnspoke"/>).</t>

<t>BIER-TE forwarding MAY support ECMP adjacencies to save bits in ECMP
scenarios, see <xref target="ecmp"/> for an example.
This is a MAY requirement, because the deployment importance of ECMP adjacencies for BIER-TE
is unclear as one can also leverage ECMP of the routing underlay via forwarded_routed
adjacencies and/or might prefer to have more explicit control of the path
chosen via explicit BP/adjacencies for each ECMP path alternative.</t>

    </section>

  </section>
  <!-- forwarding -->

<section anchor="controller-ops" title="BIER-TE Controller Operational Considerations">

  <section anchor="bitpositions" title="Bit position Assignments">

<t>This section describes how the BIER-TE Controller can use the
different BIER-TE adjacency types to define the bit positions of a BIER-TE domain.</t>

<t>Because the size of the BitString limits the size of the
BIER-TE domain, many of the options described exist to support larger
topologies with fewer bit positions (4.1, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8).</t>

    <section anchor="p2p-links" title="P2P Links">

<t>On a P2P link that connects two BFR, the same bit position can be used on
both BFR for the adjacency to the neighboring BFR. A P2P link requires therefore
only one bit position.</t>

    </section>
    <!-- p2p-links -->

    <section anchor="bfer" title="BFER">

<t>Every non-Leaf BFER is given a unique bit position with a local_decap adjacency.</t>

    </section>
    <!-- bfer -->

    <section anchor="leaf-bfer" title="Leaf BFERs">


<figure anchor="leaf-bfer-picture" title="Leaf vs. non-Leaf BFER Example">
<artwork align="left"><![CDATA[
        BFR1(P) BFR2(P)             BFR1(P)  BFR2(P)
          |  \ /  |                    |       |
          |   X   |                    |       |
          |  / \  |                    |       |
     BFER1(PE)  BFER2(PE)        BFER1(PE)----BFER2(PE)
                                        
                                           ^ U-turn link

         Leaf BFER /               Non-Leaf BFER /
          PE-router                  PE-router
]]></artwork></figure>

<t>A leaf BFERs is one where incoming BIER-TE packets never need to
be forwarded to another BFR but are only sent to the BFER
to exit the BIER-TE domain. For example, in networks where Provider Edge (PE) router
are spokes connected to Provider (P) routers, those PEs are Leaf BFERs unless
there is a U-turn between two PEs.</t>

<t>Consider how redundant disjoint
traffic can reach BFER1/BFER2 in <xref target="leaf-bfer-picture"/>: When BFER1/BFER2
are Non-Leaf BFER as shown on the right-hand side, one traffic
copy would be forwarded to BFER1 from BFR1, but the other one
could only reach BFER1 via BFER2, which makes BFER2 a non-Leaf
BFER. Likewise, BFER1 is a non-Leaf BFER when forwarding traffic to BFER2.
Note that the BFERs in the left-hand picture are only guaranteed to
be leaf-BFER by fitting routing configuration that prohibits transit
traffic to pass through the BFERs, which is commonly applied in these
topologies.</t>

<t>In most situations, leaf-BFER that are to be addressed via the same BitString can share a single bit position for their local_decap() adjacency in that BitString and therefore save bit positions. On a non-leaf BFER, a received BIER-TE packet may only need to transit the BFER or it may need to also be decapsulated. Whether or not to decapsulate the packet therefore needs to be indicated by a unique bit position populated only on the BIFT of this BFER with a local_decap() adjacency. On a leaf-BFER, packets never need to pass through; any packet received is therefore usually intended to be decapsulated. This can be expressed by a single, shared bit position that is populated with a local_decap() adjacency on all leaf-BFER addressed by the BitString.</t>

<t>The possible exception from this leaf-BFER bit position optimization can be cases where the bit position on the prior BIER-TE BFR (which created the packet copy for the leaf-BFER in question) is populated with multiple adjacencies as an optimization, such as in <xref target="lans"/> or <xref target="hubnspoke"/>. With either of these two optimizations, the sender of the packet could only control explicitly whether the packet was to be decapsulated on the leaf-BFER in question, if the leaf-BFER has a unique bit position for its local_decap() adjacency.</t>

<t>However, if the bit position is shared across leaf-BFER, and packets are therefore decapsulated potentially unnecessarily, this may still be appropriate if the decapsulated payload of the BIER-TE packet does indicate whether or not the packet needs to be further processed/received. This is typically true for example if the payload is IP multicast because IP multicast on a BFER would know the membership state of the IP multicast paylod and be able to discard it if the packet was delivered unnecessarily by the BIER-TE layer. If the payload has no such membership indication, and the BFIR wants to have explicit control about which BFER are to receive and decapsulate a packet, then these two optimizations can not be used together with shared bit positions optimization for leaf-BFER.</t>

    </section>
    <!-- leaf-bfer -->

    <section anchor="lans" title="LANs">

<t>In a LAN, the adjacency to each neighboring BFR
is given a unique bit position. The adjacency of this bit position
is a forward_connected() adjacency towards the BFR and this bit position
is populated into the BIFT of all the other BFRs on that LAN.</t>

<figure anchor="lan-picture" title="LAN Example">
<artwork align="left"><![CDATA[
         BFR1
          |p1
   LAN1-+-+---+-----+
       p3|  p4|   p2|
       BFR3 BFR4  BFR7
]]></artwork></figure>

<t>If Bandwidth on the LAN is not an issue and most BIER-TE traffic
should be copied to all neighbors on a LAN, then bit positions
can be saved by assigning just a single bit position to the LAN
and populating the bit position of the BIFTs of each BFRs on
the LAN with a list of forward_connected() adjacencies to all other
neighbors on the LAN.</t>

<t>This optimization does not work in the case of BFRs redundantly
connected to more than one LAN with this optimization because
these BFRs would receive duplicates and forward those duplicates into
the opposite LANs. Adjacencies of such BFRs into their LAN still
need a separate bit position.</t>

    </section>
    <!-- lans -->

    <section anchor="hubnspoke" title="Hub and Spoke">

<t>In a setup with a hub and multiple spokes connected via separate
p2p links to the hub, all p2p adjacencies from the hub to the spokes links can share the same bit position.
The bit position on the hub's BIFT is  set up with a list of
forward_connected() adjacencies, one for each Spoke.</t>

<t>This option is similar to the bit position optimization in
LANs: Redundantly connected spokes need their own bit positions,
unless they are themselves Leaf-BFER.</t>

<t>This type of optimized BP could be used for example when all
traffic is "broadcast" traffic (very dense receiver set)
such as live-TV or situation-awareness (SA).
This BP optimization can then be used to explicitly steer different traffic
flows across different ECMP paths in Data-Center or broadband-aggregation
networks with minimal use of BPs.</t>

    </section>
    <!-- hubnspoke -->

    <section anchor="rings" title="Rings">

<t>In L3 rings, instead of assigning a single bit position for
every p2p link in the ring, it is possible to save bit positions by
setting the "DoNotClear" (DNC) flag on forward_connected() adjacencies.</t>

<t>For the rings shown in <xref target="ring-picture"/>, a single bit position
will suffice to forward traffic entering the ring at BFRa or BFRb
all the way up to BFR1:</t>

<t>On BFRa, BFRb, BFR30,... BFR3, the bit position is populated with
a forward_connected() adjacency pointing to the clockwise neighbor
on the ring and with DNC set. On BFR2, the adjacency also points
to the clockwise neighbor BFR1, but without DNC set.</t>

<t>Handling DNC this way ensures that copies forwarded from any BFR in
the ring to a BFR outside the ring will not have the ring bit position set,
therefore minimizing the chance to create loops.</t>

<figure anchor="ring-picture" title="Ring Example">
<artwork align="left"><![CDATA[
               v        v
               |        |
        L1     |   L2   |   L3
    /-------- BFRa ---- BFRb --------------------\
    |                                            |
    \- BFR1 - BFR2 - BFR3 - ... - BFR29 - BFR30 -/
        |      |    L4               |      |
     p33|                         p15|
        BFRd                       BFRc
]]></artwork></figure>

<t>Note that this example only permits for packets intended to make it all
the way around the ring to enter it at
BFRa and BFRb, and that packets will always travel clockwise. If
packets should be allowed to enter the ring at any ring BFR, then one
would have to use two ring bit positions. One for each direction:
clockwise and counterclockwise.</t>

<t>Both would be set up to stop rotating on the same link, e.g. L1. When the
ingress ring BFR creates the clockwise copy, it will clear the counterclockwise
bit position because the DNC bit only applies to the bit for which the
replication is done. Likewise for the clockwise
bit position for the counterclockwise copy. As a result, the ring ingress
BFR will send a copy in both directions, serving BFRs on either side of the
ring up to L1.</t>

    </section>
    <!-- rings -->

    <section anchor="ecmp" title="Equal Cost MultiPath (ECMP)">

<t>[RFC-Editor: A reviewer (Lars Eggert) noted that the infinite "to use" in the following sentence is not correct. The same was also noted for several other similar instances. What exactly should be done about this ?].</t>

<t>An ECMP adjacency allows to use just one BP to deliver packets
to one one of N adjacencies instead of one BP for each adjacency. 
In the common example case <xref target="ecmp-picture"/>,
a link-bundle of three links L1,L2,L3 connects BFR1 and BFR2, and
only one BP is used instead of three BP to deliver packets from
BFR1 to BFR2.</t>

<figure anchor="ecmp-picture" title="ECMP Example">
<artwork align="left"><![CDATA[
             --L1-----
        BFR1 --L2----- BFR2
             --L3-----

  BIFT entry in BFR1:
  ------------------------------------------------------------------
  | Index |  Adjacencies                                           |
  ==================================================================
  | 0:6   |  ECMP({forward_connected(L1, BFR2),                    |
  |       |        forward_connected(L2, BFR2),                    |
  |       |        forward_connected(L3, BFR2)}, seed)             |
  ------------------------------------------------------------------

  BIFT entry in BFR2:
  ------------------------------------------------------------------
  | Index |  Adjacencies                                           |
  ==================================================================
  | 0:6   |  ECMP({forward_connected(L1, BFR1),                    |
  |       |        forward_connected(L2, BFR1),                    |
  |       |        forward_connected(L3, BFR1)}, seed)             |
  ------------------------------------------------------------------
]]></artwork></figure>

<t>This document does not standardize any ECMP algorithm because it
is sufficient for implementations to document their freely chosen 
ECMP algorithm.
<xref target="ecmp-algo-picture"/> shows an example ECMP algorithm,
and would double as its documentation: A BIER-TE controller could
determine which adjacency is choosen based on the seed and adjacencies parameters
and the packet entropy.</t>

<figure anchor="ecmp-algo-picture" title="ECMP algorithm Example">
<artwork align="left"><![CDATA[

   forward(packet, ECMP(adj(0), adj(1),... adj(N-1), seed)):
      i = (packet(bier-header-entropy) XOR seed) % N
      forward packet to adj(i)

]]></artwork></figure>

<t>In the following example, all traffic from BFR1 towards BFR10 is
intended to be ECMP load split equally across the topology. This
example is not meant as a likely setup, but to illustrate that ECMP can
be used to share BPs not only across link bundles, but also across
alternative paths across different transit BFR, and it explains
the use of the seed parameter.</t>

<figure anchor="polarization-picture" title="Polarization Example">
<artwork align="left"><![CDATA[
                 BFR1         (BFIR)
               /L11  \L12
              /       \
          BFR2         BFR3
         /L21 \L22    /L31 \L32
        /      \     /      \
       BFR4  BFR5   BFR6  BFR7
        \      /     \      /
         \    /       \    /
          BFR8         BFR9
              \       /
               \     /
                BFR10         (BFER)

  BIFT entry in BFR1:
  ------------------------------------------------------------------
  | 0:6   |  ECMP({forward_connected(L11, BFR2),                   |
  |       |        forward_connected(L12, BFR3)}, seed1)           |
  ------------------------------------------------------------------

  BIFT entry in BFR2:
  ------------------------------------------------------------------
  | 0:7   |  ECMP({forward_connected(L21, BFR4),                   |
  |       |        forward_connected(L22, BFR5)}, seed1)           |
  ------------------------------------------------------------------

  BIFT entry in BFR3:
  ------------------------------------------------------------------
  | 0:7   |  ECMP({forward_connected(L31, BFR6),                   |
  |       |        forward_connected(L32, BFR7)}, seed1)           |
  ------------------------------------------------------------------

  BIFT entry in BFR4, BFR5:
  ------------------------------------------------------------------
  | 0:8   |  forward_connected(Lxx, BFR8)  |xx differs on BFR4/BFR5|
  ------------------------------------------------------------------

  BIFT entry in BFR6, BFR7:
  ------------------------------------------------------------------
  | 0:8   |  forward_connected(Lxx, BFR9)  |xx differs on BFR6/BFR7|
  ------------------------------------------------------------------

  BIFT entry in BFR8, BFR9:
  ------------------------------------------------------------------
  | 0:9   |  forward_connected(Lxx, BFR10) |xx differs on BFR8/BFR9|
  ------------------------------------------------------------------
  
]]></artwork></figure>

<t>Note that for the following discussion of ECMP, only the BIFT ECMP
adjacencies on BFR1, BFR2, BFR3 are relevant. The re-use of BP across
BFR in this example is further explained in <xref target="reuse"/>
below.</t>

<t> With the setup of ECMP in the topology above, traffic would not be
equally load-split. Instead, links L22 and L31 would see no traffic
at all: BFR2 will only see traffic from BFR1 for which the ECMP
hash in BFR1 selected the first adjacency in the list of 2 adjacencies
given as parameters to the ECMP. It is link L11-to-BFR2. BFR2 performs 
again ECMP with two adjacencies on that subset of traffic using the same
seed1, and will therefore again select the first of its two adjacencies:
L21-to-BFR4. And therefore L22 and BFR5 sees no traffic. Likewise for
L31 and BFR6.</t>

<t>This issue in BFR2/BFR3 is called polarization. It results from the
re-use of the same hash function across multiple consecutive hops in
topologies like these.  To resolve this issue, the ECMP adjacency on BFR1 
can be set up with a different seed2 than the ECMP adjacencies on BFR2/BFR3.
BFR2/BFR3 can use the same hash because packets will not sequentially
pass across both of them. Therefore, they can also use the same BP 0:7.</t>

<t>Note that ECMP solutions outside of BIER often hide the
seed by auto-selecting it from local entropy such as unique local or
next-hop identifiers. Allowing the BIER-TE Controller to explicitly set the seed gives
the ability for it to control same/different path selection across multiple
consecutive ECMP hops.</t>

    </section>
    <!-- ecmp -->
    <section anchor="routed" title="Forward Routed adjacencies">

      <section anchor="reducing" title="Reducing bit positions">

<t>Forward_routed() adjacencies can reduce the number of bit positions
required when the path steering requirement is not hop-by-hop
explicit path selection, but loose-hop selection. Forward_routed() adjacencies
can also allow to operate BIER-TE across intermediate hop routers
that do not support BIER-TE.</t>

<figure anchor="routed-picture" title="Forward Routed Adjacencies Example">
<artwork align="left"><![CDATA[
                   ...............             
         ...BFR1--...           ...--L1-- BFR2...
                  ... .Routers. ...--L2--/    
         ...BFR4--...           ...------ BFR3...
                   ...............         |        
                                          LO
                    Network Area 1
]]></artwork></figure>

<t>Assume the requirement in <xref target="routed-picture"/> is to explicitly steer 
traffic flows that have arrived at BFR1 or BFR4 via a path
in the routing underlay "Network Area 1" to one of the following three next
segments: (1) BFR2 via link L1, (2) BFR2 via link L2, or (3) via BFR3.</t>

<t>To enable this, both BFR1 and BFR4 are set up with a forward_routed
adjacency bit position towards an address of BFR2 on link L1, another
forward_routed() bit position towards an address of BFR2 on link L2 and a third
forward_routed() bit position towards a node address LO of BFR3.</t>

      </section>
      <!-- reducing -->

      <section anchor="without" title="Supporting nodes without BIER-TE">

<t>Forward_routed() adjacencies also enable incremental deployment of BIER-TE.
Only the nodes through which BIER-TE traffic needs to be steered -
with or without replication - need to support BIER-TE. Where
they are not directly connected to each other, forward_routed
adjacencies are used to pass over non BIER-TE enabled nodes.</t>

      </section>
      <!-- without -->

    </section>
    <!-- routed -->

      <section anchor="reuse" title="Reuse of bit positions (without DNC)">

<t>bit positions can be re-used across multiple BFR to minimize the number
of BP needed. This happens when adjacencies on multiple BFR use the DNC
flag as described above, but it can also be done for non-DNC adjacencies.
This section only discusses this non-DNC case.</t>

<t>Because BP are cleared when passing a BFR with an adjacency for that
BP, reuse of BP across multiple BFR does not introduce any problems
with duplicates or loops that do not also exist when every adjacency has
a unique BP. Instead, the challenge when reusing BP is whether it
allows to still achieve the desired Tree Engineering goals.</t>

<t>BP cannot be reused across two BFR that would need to be passed
sequentially for some path: The first BFR will clear the BP, so those
paths cannot be built. BP can be set across BFR that would (A) only
occur across different paths or (B) across different branches of the same tree.</t>

<t>An example of (A) was given in <xref target="polarization-picture"/>,
where BP 0:7, BP 0:8 and BP 0:9 are each reused across multiple BFRs because
a single packet/path would never be able to reach more than one BFR 
sharing the same BP.</t>

<t>Assume the example was changed: BFR1 has no ECMP adjacency for BP 0:6,
but instead BP 0:5 with forward_connected() to BFR2 and BP 0:6 with
forward_connected() to BFR3.  Packets with both BP 0:5 and BP 0:6 would
now be able to reach both BFR2 and BFR3 and the still existing re-use
of BP 0:7 between BFR2 and BFR3 is a case of (B) where reuse of BP
is perfect because it does not limit the set of useful path choices:</t>

<t>If instead of reusing BP 0:7, BFR3 used a separate BP 0:10 for its
ECMP adjacency, no useful additional path steering options would be enabled.
If duplicates at BFR10 where undesirable, this would be done by not
setting BP 0:5 and BP 0:6 for the same packet. If the duplicates where
desirable (e.g.: resilient transmission), the additional BP 0:10
would also not render additional value.</t>

<figure anchor="scaling-picture2" title="Reuse of BP">
<artwork align="left"><![CDATA[
                       area1 
                   BFR1a BFR1b
                     /    \
        ....................................
        .                Core              .
        ....................................
        |    /       \    /           \  |
      BFR2a BFR2b  BFR3a BFR3b      BFR6a BFR6b
       /-------\   /---------\      /--------\
       | area2 |   |  area3  | ...  | area6  |
       | ring  |   |  ring   |      | ring   |
       \-------/   \---------/      \--------/
        more BFR     more BFR        more BFR
]]></artwork></figure>

<t>Reuse may also save BPs in larger topologies.  Consider the topology
shown in <xref target="scaling-picture2"/>. A BFIR/sender (e.g.: video headend) is attached to area 1,
and area 2...6 contain receivers/BFER. Assume each area had a distribution
ring, each with two BPs to indicate the direction (as explained before). 
These two BPs could be reused across the 5 areas.  Packets would be replicated
through other BPs for the Core to the desired subset of areas, and once a packet copy
reaches the ring of the area, the two ring BPs come into play. This reuse is 
a case of (B), but it limits the topology choices: Packets
can only flow around the same direction in the rings of all areas. This may or may not
be acceptable based on the desired path steering options: If resilient
transmission is the path engineering goal, then it is likely a good
optimization, if the bandwidth of each ring was to be optimized separately,
it would not be a good limitation.</t>

      </section>
      <section anchor="bits-summary" title="Summary of BP optimizations">

<t>This section reviewed a range of techniques by which a BIER-TE Controller can create
a BIER-TE topology in a way that minimizes the number of necessary BPs.</t>

<t>Without any optimization, a BIER-TE Controller would attempt to map the network
subnet topology 1:1 into the BIER-TE topology and  every subnet adjacent
neighbor requires a forward_connected() BP and every BFER requires a local_decap() BP.</t>

<t>The optimizations described are then as follows:<list style="symbols">
  <t>P2P links require only one BP (<xref target="p2p-links"/>).</t>
  <t>All leaf-BFER can share a single local_decap() BP (<xref target="leaf-bfer"/>).</t>
  <t>A LAN with N BFR needs at most N BP (one for each BFR). It only needs one BP for all those BFR that are not redundantly connected to multiple LANs (<xref target="lans"/>).</t>
  <t>A hub with p2p connections to multiple non-leaf-BFER spokes can share one BP to all spokes if traffic can be flooded to all spokes, e.g.: because of no bandwidth concerns or dense receiver sets (<xref target="hubnspoke"/>).</t>
  <t>Rings of BFR can be built with just two BP (one for each direction) except for BFR with multiple ring connections - similar to LANs (<xref target="rings"/>).</t>
  <t>ECMP adjacencies to N neighbors can replace N BP with 1 BP. Multihop ECMP can avoid polarization through different seeds of the ECMP algorithm (<xref target="ecmp"/>).</t>
  <t>Forward_routed() adjacencies allow to "tunnel" across non-BIER-TE capable routers and across BIER-TE capable routers where no traffic-steering or replications are required (<xref target="routed"/>).</t>
  <t>BP can generally be reused across a set of nodes where it can be guaranteed that no path will
ever need to traverse more than one node of the set. Depending on scenario, this may limit the feasible path steering options (<xref target="reuse"/>).</t>

</list></t>

<t>Note that the described list of optimizations is not exhaustive. Especially when the set of required path steering choices is limited and the set of possible subsets of BFERs that should be able to receive traffic is limited, further optimizations of BP are possible. The hub &amp; spoke optimization is a simple example of such traffic pattern dependent optimizations.</t>

      </section>

  </section>
  <!-- bitpositions -->

  <section anchor="avoiding" title="Avoiding duplicates and loops">

      <section anchor="loops" title="Loops">

<t>Whenever BIER-TE creates a copy of a packet, the BitString of
that copy will have all bit positions cleared that are associated
with adjacencies on the BFR. This inhibits looping of packets.
The only exception are adjacencies with DNC set.</t>

<figure anchor="ring-picture2" title="Miswired Ring Example">
<artwork align="left"><![CDATA[
               v        v
               |        |
        L1     |   L2   |   L3
    /-------- BFRa ---- BFRb ---------------------\
    |        .                                    |
    |         ......  Wrong link wiring           |
    |               .                             |
    \- BFR1 - BFR2   BFR3 - ... - BFR29 - BFR30 -/
        |      |    L4               |      |
     p33|                         p15|
        BFRd                       BFRc
]]></artwork></figure>

<t>With DNC set, looping can happen.  Consider in <xref target="ring-picture2"/>
that link L4 from BFR3 is (inadvertently) plugged into the L1 interface of
BFRa (instead of BFR2). This creates a loop where the rings clockwise bit position is
never cleared for copies of the packets traveling clockwise
around the ring.</t>

<t>To inhibit looping in the face of such physical misconfiguration,
only forward_connected() adjacencies are permitted to have DNC set,
and the link layer port unique unicast destination address of the adjacency (e.g. MAC address)
protects against closing the loop. Link layers without port unique
link layer addresses should not be used with the DNC flag set.</t>

      </section>
      <!-- loops -->

      <section anchor="duplicates" title="Duplicates">

<figure anchor="duplicates-picture" title="Duplicates Example">
<artwork align="left"><![CDATA[
                 BFIR1
                /    \
               / p2   \ p3
              BFR2   BFR3
               \ p4   / p5
                \    /
                 BFER4
]]></artwork></figure>

<t>Duplicates happen when the graph expressed by a BitString is not a
tree but redundantly connecting BFRs with each other. In <xref target="duplicates-picture"/>,
a BitString of p2,p3,p4,p5 would result in duplicate packets to arrive on BFER4.
The BIER-TE Controller must therefore ensure to only create BitStrings that are trees.</t>

<t>When links are incorrectly physically re-connected before the
BIER-TE Controller updates BitStrings in BFIRs, duplicates can happen.
Like loops, these can be inhibited by link layer addressing
in forward_connected() adjacencies.</t>

<t>If interface or loopback addresses used in forward_routed() adjacencies
are moved from one BFR to another, duplicates can equally happen.
Such re-addressing operations must be coordinated with the BIER-TE Controller.</t>

    </section>
    <!-- duplicates -->

  </section>
  <!-- avoiding -->

  <section anchor="mgmt-stuff" title="Managing SI, sub-domains and BFR-ids">

<t>When the number of bits required to represent the necessary hops
in the topology and BFER exceeds the supported BitStringLength (BSL),
multiple SIs and/or sub-domains must be used. This section discusses how.</t>

<t>BIER-TE forwarding does not require the concept of BFR-id, but routing
underlay, flow overlay and BIER headers may. This section also discusses
how BFR-ids can be assigned to BFIR/BFER for BIER-TE.</t>

    <section anchor="why" title="Why SI and sub-domains">

<t>For (non-TE) BIER and BIER-TE forwarding, the most important result of using multiple
SI and/or sub-domains is the same: Packets that need to be sent to BFERs in
different SIs or sub-domains require different BIER packets: each one with a
BitString for a different (SI,sub-domain) combination. Each such BitString uses
one BSL sized SI block in the BIFT of the sub-domain. We call this
a BIFT:SI (block).</t>

<t>For BIER and BIER-TE forwarding themselves there is also no difference whether
different SIs and/or sub-domains are chosen, but SI and sub-domain have
different purposes in the BIER architecture shared by BIER-TE.
This impacts how operators are managing them and how especially flow overlays
will likely use them.</t>

<t>By default, every possible BFIR/BFER in a BIER network would likely be given
a BFR-id in sub-domain 0 (unless there are > 64k BFIR/BFER). </t>

<t>If there are different flow services (or service instances) requiring replication
to different subsets of BFERs, then it will likely not be possible to achieve
the best replication efficiency for all of these service instances via sub-domain 0.

Ideal replication efficiency for N BFER exists in a sub-domain if they are
split over not more than ceiling(N/BitStringLength) SI.</t>

<t>If service instances justify additional BIER:SI state in the network, additional
sub-domains will be used: BFIR/BFER are assigned BFR-id in those sub-domains
and each service instance is configured to use the most appropriate sub-domain.
This results in improved replication efficiency for different services.</t>

<t>Even if creation of sub-domains and assignment of BFR-id to BFIR/BFER in those
sub-domains is automated, it is not expected that individual
service instances can deal with BFER in different sub-domains. A service
instance may only support configuration of a single sub-domain it should rely on.</t>

<t>To be able to easily reuse (and modify as little as possible) existing
BIER procedures including flow-overlay and routing underlay, when BIER-TE
forwarding is added, we therefore reuse SI and sub-domain logically in the
same way as they are used in BIER: All necessary BFIR/BFER for a service use
a single BIER-TE BIFT and are split across as many SIs as necessary (see <xref target="bit-requirements"/>).
Different services may use different sub-domains that primarily exist to
provide more efficient replication (and for BIER-TE desirable path steering)
for different subsets of BFIR/BFER.</t>

    </section>
    <!-- why -->

    <section anchor="bit-requirements" title="Assigning bits for the BIER-TE topology">

<t>In BIER, BitStrings only need to carry bits for BFERs, which leads to the
model that BFR-ids map 1:1 to each bit in a BitString.</t>

<t>In BIER-TE, BitStrings need to carry bits to indicate not only the receiving
BFER but also the intermediate hops/links across which the packet must be sent.
The maximum number of BFER that can be supported in a single BitString or BIFT:SI
depends on the number of bits necessary to represent the desired topology between
them.</t>

<t>"Desired" topology because it depends on the physical topology, and
on the desire of the operator to allow for explicit path steering across
every single hop (which requires more bits), or reducing the number of required
bits by exploiting optimizations such as unicast (forward_routed), ECMP or flood
(DNC) over "uninteresting" sub-parts of the topology - e.g. parts where different
trees do not need to take different paths due to path steering reasons.</t>

<t>The total number of bits to describe the topology vs. the number of BFERs in a BIFT:SI can
range widely based on the size of the topology and the amount of alternative paths
in it. In a BIER-TE topology crafted by a BIER-TE expert, the higher the percentage of non-BFER bits, the higher the likelihood, that those topology
bits are not just BIER-TE overhead without additional benefit, but instead that they
will allow to express desirable path steering alternatives.</t>

    </section>

    <section anchor="bfr-id" title="Assigning BFR-id with BIER-TE">

<t>BIER-TE forwarding does not use the BFR-id, nor does it require for
the BFR-id field of the BIER header to be set to a particular value.
However, other parts of a BIER-TE deployment may need a BFR-id, specifically
overlay signaling, and in that case BFR need to also have BFR-ids for BIER-TE SDs.</t>

<t>For example, for BIER overlay signaling, BFIR need to have a BFR-id, because this
BFIR BFR-id is carried in the BFR-id field of the BIER header to indicate
to the overlay signaling on the receiving BFER which BFIR originated the packet.</t>

<t>In BIER, BFR-id = BSL * SI + BP, such that the SI and BP of a BFER
can be calculated from the BFR-id and vice versa. This also means
that every BFR with a BFR-id has a reserved BP in an SI, even if
that is not necessary for BIER forwarding, because the BFR may
never be a BFER but only a BFIR.</t>

<t>In BIER-TE, for a non-leaf BFER, there is usually a single BP for that BFER with a
local_decap() adjacency on the BFER. The BFR-id for such a BFER can therefore
be determined using the same procedure as in (non-TE) BIER: BFR-id = SI * BitStringLength + BP.</t>

<t>As explained in <xref target="leaf-bfer"/>, leaf BFERs do not need such
a unique local_decap() adjacency. Likewise, BFIR who are not also BFER
may not have a unique local_decap() adjacency either. For all those BFIR
and (leaf) BFER, the controller needs to determine unique BFR-ids that
do not collide with the BFR-ids derived from the non-leaf BFER local_decap() BPs.</t>

<t>While this document defines no requirements how to allocate such BFR-id,
a simple option is to derive it from the (SI,BP) of an adjacency that is
unique to the BFR in question. For a BFIR this can be the first adjacency
only populated on this BFIR, for a leaf-BFER, this could be the first BP
with an adjacency towards that BFER.</t>

    </section>

    <section anchor="bitstring-mappings" title="Mapping from BFR to BitStrings with BIER-TE">

<t>In BIER, applications of the flow overlay on a BFIR can calculate the (SI,BP) of a
BFER from the BFR-id of the BFER and can therefore easily determine the BitStrings
for a BIER packet to a set of BFER with known BFR-ids.</t>

<t>In BIER-TE this mapping needs to be equally supported for flow overlays.
This section outlines two core options, based on how "complex" the Tree Engineering
is that the BIER-TE controller performs for a particular application.</t>

<t>"Independent branches": For a given flow overlay instance, the branches
from a BFIR to every BFER are calculated by the BIER-TE controller to be
independent of the branches to any other BFER.  Shortest path trees are the most common
examples of trees with independent branches.</t>

<t>"Interdependent branches": When a BFER is added or deleted from a particular
distribution tree, the BIER-TE controller has to recalculate the branches to other BFER,
because they may need to change.  Steiner trees are examples of interdependent branch trees.</t>

<t>If "independent branches" are used, the BIER-TE Controller 
can signal to the BFIR flow overlay for every BFER an SI:BitString that
represents the branch to that BFER.  The flow overlay on the BIFR can then independently
of the controller calculate the SI:BitString for all desired BFER by OR'ing their BitStrings.
This allows for flow overlay applications to operate independently of the controller
whenever it needs to determine which subset of BFERs need to receive a particular packet.</t>

<t>If "interdependent branches" are required, the application would need to inquire
the SI:BitString for a given set of BFER whenever the set changes.</t>

<t>Note that in either case (unlike in BIER), the bits may need to
change upon link/node failure/recovery, network expansion and network resource consumption 
by other traffic as part of traffic engineering goals (e.g.: re-optimization of lower
priority traffic flows). Interactions between such BFIR applications and the BIER-TE Controller
do therefore need to support dynamic updates to the SI:BitStrings.</t>

<t>Communications between BFIR flow overlay and BIER-TE controller
requires some way to identify BFER. If BFR-ids are used in the deployment, as
outlined in <xref target="bfr-id"/>, then those are the natural BFR identifier. If
BFR-ids are not used, then any other unique identifier, such as the BFR-prefix
of the BFR as of <xref target="RFC8279"/> could be used.</t>


    </section>
    <!-- bfr-id -->

    <section anchor="assigning" title="Assigning BFR-ids for BIER-TE">

<t>It is not currently determined if a single sub-domain could or should be
allowed to forward both (non-TE) BIER and BIER-TE packets. If this should be
supported, there are two options:</t>

<t>A. BIER and BIER-TE have different BFR-id in the same sub-domain. This allows
higher replication efficiency for BIER because their BFR-id can be assigned
sequentially, while the BitStrings for BIER-TE will have also the additional
bits for the topology. There is no relationship between a BFR BIER BFR-id and
BIER-TE BFR-id.</t>

<t>B. BIER and BIER-TE share the same BFR-id. The BFR-ids are assigned as explained
above for BIER-TE and simply reused for BIER. The replication efficiency for BIER will
be as low as that for BIER-TE in this approach.</t>

    </section>
    <!-- assigning -->

    <section anchor="allocation-example" title="Example bit allocations">

      <section anchor="with-bier" title="With BIER">

<t>Consider a network setup with a BSL of 256 for a network
topology as shown in <xref target="scaling-picture"/>. The network has 6 areas, each with
170 BFERs, connecting via a core with 4 (core) BFRs. To address all BFERs with BIER,
4 SIs are required. To send a BIER
packet to all BFER in the network, 4 copies need to be sent by the BFIR. On the
BFIR it does not make a difference how the BFR-ids are allocated to BFER
in the network, but for efficiency further down in the network it does
make a difference.</t>

<figure anchor="scaling-picture" title="Scaling BIER-TE bits by reuse">
<artwork align="left"><![CDATA[
             area1           area2        area3
            BFR1a BFR1b  BFR2a BFR2b   BFR3a BFR3b
              |  \         /    \        /  |
              ................................
              .                Core          .
              ................................
              |    /       \    /        \  |
            BFR4a BFR4b  BFR5a BFR5b   BFR6a BFR6b
             area4          area5        area6
]]></artwork></figure>

<t>With random allocation of BFR-id to BFER, each receiving area would (most likely)
have to receive all 4 copies of the BIER packet because there would be
BFR-id for each of the 4 SIs in each of the areas. Only further towards each
BFER would this duplication subside - when each of the 4 trees runs out of
branches.</t>

<t>If BFR-ids are allocated intelligently, then all the BFER in an area
would be given BFR-id with as few as possible different SIs.
Each area would only have to forward one or two packets instead of 4.</t>

<t>Given how networks can grow over time, replication efficiency in an area
will also easily go down over time when BFR-ids are network wide allocated
sequentially over time. An area that initially only has BFR-id in one SI
might end up with many SIs over a longer period of growth. Allocating SIs
to areas with initially sufficiently many spare bits for growths can help
to alleviate this issue. Or renumber BFERs after network expansion. In
this example one may consider to use 6 SIs and assign one to each area.</t>

<t>This example shows that intelligent BFR-id allocation within at least
sub-domain 0 can even be helpful or even necessary in BIER.</t>

      </section>
      <!-- with-bier -->

      <section anchor="with-bier-te" title="With BIER-TE">

<t>In BIER-TE one needs to determine a subset of the physical topology
and attached BFERs so that the "desired" representation of this topology
and the BFER fit into a single BitString. This process needs to be
repeated until the whole topology is covered.</t>

<t>Once bits/SIs are assigned to topology and BFERs, BFR-id is just a derived
set of identifiers from the operator/BIER-TE Controller as explained above.</t>

<t>Every time that different sub-topologies have overlap, bits need to
be repeated across the BitStrings, increasing the overall amount of bits
required across all BitString/SIs. In the worst case, random subsets of BFERs are
assigned to different SIs. This is much worse than in (non-TE) BIER because it not
only reduces replication efficiency with the same number of overall bits,
but even further - because more bits are required due to duplication of
bits for topology across multiple SIs. Intelligent
BFER to SI assignment and selecting specific "desired" subtopologies can
minimize this problem.</t>

<t>To set up BIER-TE efficiently for the topology of <xref target="scaling-picture"/>, the following bit
allocation method can be used. This method can easily be expanded to
other, similarly structured larger topologies.</t>

<t>Each area is allocated one or more SIs depending on the number of future
expected BFERs and number of bits required for the topology in the area.
In this example, 6 SIs, one per area.</t>

<t>In addition, we use 4 bits in each SI: bia, bib, bea, beb: (b)it (i)ngress (a),
(b)it (i)ngress (b), (b)it (e)gress (a), (b)it (e)gress (b). These bits will be used to pass BIER
packets from any BFIR via any combination of ingress area a/b BFR and egress area
 a/b BFR into a specific target area. These bits are then set up with the right
 forward_routed() adjacencies on the BFIR and area edge BFR:</t>

<t>On all BFIRs in an area j|j=1...6, bia in each BIFT:SI is populated with the same
forward_routed(BFRja), and bib with forward_routed(BFRjb). On all area
edge BFR, bea in BIFT:SI=k|k=1...6 is populated with forward_routed(BFRka) and
beb in BIFT:SI=k with forward_routed(BFRkb).</t>

<t>For BIER-TE forwarding of a packet to a subset of BFERs across all areas,
a BFIR would create at most 6 copies, with SI=1...SI=6, In each packet,
the bits indicate bits for topology and BFER in that topology plus the four bits
to indicate whether to pass this packet via the ingress area a or b border BFR
and the egress area a or b border BFR, therefore allowing path steering
for those two "unicast" legs: 1) BFIR to ingress area edge and 2) core to egress
area edge. Replication only happens inside the egress areas. For BFER in the
same area as in the BFIR, these four bits are not used.</t>

      </section>
      <!-- with-bier-te -->

    </section>
    <!-- example -->

    <section anchor="summary" title="Summary">

<t>BIER-TE can, like BIER, support multiple SIs within a sub-domain to allow re-using
the concept of BFR-id and therefore minimize BIER-TE specific functions in any possible
BIER layer control plane used in conjunction with BIER-TE, flow overlay methods and BIER headers.</t>

<t>The number of BFIR/BFER possible in a sub-domain is smaller than in BIER
because BIER-TE uses additional bits for topology.</t>

<t>Sub-domains (SDs) in BIER-TE can be used like in BIER to create more efficient
replication to known subsets of BFERs.</t>

<t>Assigning bits for BFERs intelligently into the right SI is more important in
BIER-TE than in BIER because of replication efficiency and overall amount of
bits required.</t>

    </section>
    <!-- example -->

  </section>
  <!-- mgmt-stuff -->
</section>
  <!-- controller-ops -->

  <section anchor="SR" title="BIER-TE and Segment Routing">

<t>SR (xref target="RFC8402"/>) aims to enable lightweight path steering
via loose source routing. Compared to its more heavy-weight predecessor RSVP-TE,
SR does for example not require per-path signaling to each of these hops.</t>

<t>BIER-TE supports the same design philosophy for multicast.
Like in SR, it relies on source-routing -
via the definition of a BitString. Like SR, it only requires to consider
the "hops" on which either replication has to happen, or across which the
traffic should be steered (even without replication).  Any other hops can
be skipped via the use of routed adjacencies.</t>

<t>BIER-TE bit position (BP) can be understood as the BIER-TE equivalent of
"forwarding segments" in SR, but they have a different scope than SR forwarding
segments. Whereas forwarding segments in SR are global or local, BPs in BIER-TE
have a scope that is the group of BFR(s) that have adjacencies for this BP in
their BIFT. This can be called "adjacency" scoped forwarding segments.</t>

<t>Adjacency scope could be global, but then every BFR would need an adjacency
for this BP, for example a forward_routed() adjacency with encapsulation to
the global SR SID of the destination. Such a BP would always result in ingress
replication though (as in <xref target="RFC7988"/>). The first BFR encountering this BP would directly
replicate to it. Only by using non-global adjacency scope for BPs can 
traffic be steered and replicated on non-ingress BFR.</t>

<t>SR can naturally be combined with BIER-TE and help to optimize it. For example,
instead of defining bit positions for non-replicating hops, it is equally
possible to use segment routing encapsulations (e.g. SR-MPLS label stacks)
for the encapsulation of "forward_routed" adjacencies.</t>

<t>Note that (non-TE) BIER itself can also be seen to be similar to SR. BIER BPs act
as global destination Node-SIDs and the BIER BitString is simply a highly optimized
mechanism to indicate multiple such SIDs and let the network take care of effectively
replicating the packet hop-by-hop to each destination Node-SID.  What BIER does not allow is to
indicate intermediate hops, or in terms of SR the ability to indicate a sequence of SID
to reach the destination. This is what BIER-TE and its adjacency scoped BP enables.</t>

  </section>
  <!-- SR -->

  <section anchor="security" title="Security Considerations">

<t>If <xref target="RFC8296"/> is used, BIER-TE shares its security considerations.</t>

<t>BIER-TE shares the security considerations of BIER, <xref target="RFC8279"/>, with
the following overriding or additional considerations.</t>

<t>In BIER, the standardized methods for the routing underlays are IGPs
with extensions to distribute BFR-ids and BFR-prefixes. 
<xref target="RFC8401"/> specifies the extensions for IS-IS and <xref target="RFC8444"/> specifies the extensions for OSPF.
Attacking the protocols for the BIER routing underlay or (non-TE) BIER layer control
plane, or impairment of any BFR in a domain may lead to successful attacks
against  the results of the routing protocol, enabling DoS attacks against
paths or the addressing (BFR-id, BFR-prefixes) used by BIER.</t>

<t>The reference model for the BIER-TE layer control plane is a BIER-TE controller.
When such a controller is used, impairment of individual BFR in a domain causes
no impairment of the BIER-TE control plane on other BFR. If a routing
protocol is used to support forward_routed() adjacencies, then this is still an
attack vector as in BIER, but only for BIER-TE forward_routed() adjacencies, and
not other adjacencies.</t>

<t>Whereas IGP routing protocols are most often not well secured through
cryptographic authentication and confidentiality, communications between controllers and routers such as those
to be considered for the BIER-TE controller/control-plane can be and are much more commonly
secured with those security properties, for example by using Secure SHell (SSH), <xref target="RFC4253"/> for NetConf (<xref target="RFC6241"/>), or via Transport Layer Security (TLS), such as <xref target="RFC8253"/> for PCEP, <xref target="RFC5440"/>, or <xref target="RFC7589"/> for NetConf. BIER-TE controllers SHOULD use security equal to or better than these mechanisms.</t>

<t>For additional, BIER-TE independent security considerations for the
use of a central BIER-TE controller, the security
section of the protocols and security options in the previous paragraph apply.
In addition, the security considerations of <xref target="RFC4655"/> apply.</t>

<t>The most important attack vector in BIER-TE is misconfiguration,
either on the BFR themselves or via the BIER-TE controller.
Forwarding entries with DNC could be set up to create persistent loops, in which
packets only expire because of TTL. To minimize the impact of such attacks
(or more likely unintentional misconfiguration by operators and/or bad BIER-TE controller software),
the BIER-TE forwarding rules are defined to be as strict in clearing
bits as possible. The clearing of all bits with an adjacency on
a BFR prohibits that a looping packet creates additional packet amplification
through the misconfigured loop on the packet's second or further times around the
loop, because all relevant adjacency bits would have been cleared on the first round
through the loop.  In result, BIER-TE has the same degree of looping packets
as possible with unintentional or malicious loops in the routing underlay
with BIER or even with unicast traffic.</t>

<t>Deployments where BIER-TE would likely be beneficial 
may include operational models where actual configuration changes
from the controller are only required during non-production phases of
the network's life-cycle, such as in embedded networks or in manufacturing
networks during e.g. plant reworking/repairs. In these
type of deployments, configuration changes could be locked out when the
network is in production state and could only be (re-)enabled through 
reverting the network/installation into non-production state. Such
security designs would not only allow to provide additional layers
of protection against configuration attacks, but would foremost
protect the active production process from such configuration attacks.</t>

  </section>
  <!-- security -->

  <section anchor="iana" title="IANA Considerations">

<t>This document requests no action by IANA. </t>

  </section>
  <!-- iana -->

  <section anchor="ack" title="Acknowledgements">

  <t>The authors would like to thank Greg Shepherd, Ijsbrand Wijnands, Neale Ranns, Dirk Trossen, Sandy Zheng, Lou Berger, Jeffrey Zhang, Carsten Borman and Wolfgang Braun for their reviews and suggestions.</t>
  <t> Special thanks to Xuesong Geng for shepherding the document and for IESG review/suggestions by Alvaro Retana (responsible AD/RTG), Benjamin Kaduk (SEC), Tommy Pauly (TSV), Zaheduzzaman Sarker (TSV), Eric Vyncke (INT), Martin Vigoureux (RTG), Robert Wilton (OPS), Eric Kline (INT), Lars Eggert (GEN).</t>
  </section>
  <!-- ack -->

  <section anchor="changes" title="Change log [RFC Editor: Please remove]">
  <t>draft-ietf-bier-te-arch:
  <list>
      <t>12:</t>
     
      <t>IESG review Lars Eggert (GEN).</t>
      <t>Various good editorial word fixed.</t>
      <t>Pointer to non-false-positive bloom filter work that looks like it happened after our IETF discussions documented in this doc, so will not add it to doc, but here is URL for folks interested: https://ieeexplore.ieee.org/document/8486415.</t>
      <t>Did not change "native" to a different word for inclusivity because of my worry there is no estavblished single replacement word, making reading/searching/understanding more difficult.</t>
      <t>IESG review Martin Vigeureux (RTG).</t>
      <t>Added back reference to RFC8402. Textual fixes.</t>
      <t>IESG review Eric Kline (INT).</t>
      <t>2.1 Fixed typo in BFR* explanations.</t>
      <t>4.3 Added explanatio about MTU handling.</t>
      <t>IESG review Eric Vyncke (INT).</t>
      <t>Fixed up initial text to introduce various abbreviations.</t>
      <t>2.4 refined wording to "with the _intent_ to easily build common forwarding planes...".</t>
      <t>4.2.3 refined text about entropy in ECMP - now taken text from rfc8279.</t>

      <t>IESG review Zaheduzzaman Sarker (TSV).</t>
      <t>5.1.7 Refined text explaining documentation of ECMP algorithm.</t>
      <t>5.3.6.2. fixed range of areas/SI over which to build the example large network BPs - removed explanation of the large network shown to be only used for sources in area 1 (IPTV), because it was a stale explanation.</t>

      <t>IESG review Ben Kaduk (round 2):</t>
      <t>4.4 Advanced pseudocode still had one wrong "~". Root cause seems to have been day 0 problem in pseudocode written for -01, "~" was inserted in the wrong one of two code lines. Also enhanced textual description and comments in pseudocode, changed variable name AdjacentBits to PktAdjacentBits to avoid confusion with AdjacentBits[SI].</t>
      <t>5.1.3 Rewrote last two paragraphs explaining the sharing of bit positions for lead-BFER hopefully better. Also detailled how it interacts with other optimizations and the type of payload BIER-TE packets may carry.</t>
      <t>4.4 (from Carsten Borman) changed spacing in pseudocode to be consistent. Fixed {VRF}, clarified pseudocode object syntax, typos.</t>

      <t>11:  IESG review Ben Kaduk, summary:</t>
      <t>One discuss for bug in pseudocode. turned out to be one cahrcter typo.</t>
      <t>Added (non-TE) prefix in places where BIER by itsels had to be better disambiguated.</t>
      <t>enhanced text for hub-and-spoke to indicate we're only talking about hub to spoke traffic.</t>
      <t> long list ot language fixes/improvement (nits). Thanks a lot!.</t>
      <t>add suggestion to SHOULD use known confidentiality protocols between controller and BFR.</t>
      <t>10:  AD review Alvaro Retana, summary:</t>
<t>Note: rfcdiff shows more changes than actually exist because text moved around.</t>
<t>Summary:<list style="numbers">
 <t>restructuring: merged all controller sections under common controller ops main section, moved unfitting stuff out to other parts of doc. Split Intro section into Overview and Intro. Shortened Abstract, moved text into Overview,
   added sections overview.</t>
 <t>enhanced/rewrote: 2.3 Comparison with -> Relationship to BIER-TE</t>
 <t>enhanced/rewrote: 3.2 BIER-TE controller -> BIER-TE control plane, 3.2.1 BIER-TE controller, for consistency with rfc8279</t>
 <t>additional subsections for Alvaros asks</t>
 <t>added to: 3.3 BIER-TE forwarding plane (consistency with rfc8279)</t>
 <t>Enhanced description of 4.3/encap considerations to better explain how BIER/BIER-TE can run together.</t>
</list></t>

<t>Notation: Markers (a),(b),... at end of points are references from the review discussion with Alvaro to the changes made.</t>

<t>Details:.</t>
 <t>Throughout text: changed term spelling to rfc8279 - bit positions, sub-domain, ... (i).</t>
 <t>Reset changed to clear, also DNR changed to DNC (Do Not Clear) (q).</t>
 <t>Abstract: Shortened. Removed name explanation note (Tree Engineering), (a).</t>
 <t>1. Introduction -> Overview: Moved important explanation paragraph from abstract to Introduction. Fixed text,  (a).</t>
 <t>   Added bullet point list explanation of structure of document (e).</t>
 <t>   Renamed to Overview because that is now more factually correct.</t>
 <t>1.1. Fixed bug in example adding bit p15.(l).</t>
 <t>2. (New - Introduction): Moved section 1.1 - 1.3 (examples, comparison with BIER-TE) from Introduction into new "Overview" section. Primarily so that "requirements language" section (at end of Introduction) is not in middle of document after all the Introduction.</t>
 <t>2.1 Removed discussion of encap, moved to 4.2.2 (m).</t>
 <t>2.2 enhanced paragraph suggesting native/overlay topology types, also sugest type hybrid (n).</t>
 <t>2.3 Overhauled comparison text BIER/BIER-TE, structured into common, different, not-required-by-te, integration-bier-bier-te. Changed title to "Relationship" to allow including last point. (f).</t>
 <t>2.4 moved Hardware forwarding comparison section into section 2 to allow coalescing of sections into section 5 about the controller operations (hardware forwarding was in the middle of it, wrong place). Shortened/improved third paragraph by pointing to BIFT as deciding element for selection between BIER/BIER-TE. Removed notion of experimentation (this now targets standard) (g).</t>
 <t>3. (Components): Aligned component name and descriptions better with RFC8279.  Now describe exactly same three layers. BIER layer constituted from BIER-TE control plane and BIER-TE forwarding plane. BIER-TE controller is now simply component of BIER-TE control plane. (b).</t>
 <t>3.1. shortened/improved paragraph explaining use of SI:BP instead of also bfr-id as index into BIFT, rewrote paragraph talking about reuse of BPs(o).</t>
 <t>3.2. rewrote explanation of BIER-TE control plane in the style of RFC8729 Section 4.2 (BIER layer) with numbered points. Note that RFC8729 mixes control and forwarding plane bullet points (this doc does not). Merged text from old sections 2.2.1 and 2.2.3 into list. (b).</t>
 <t>3.2.1. Expanded/improved explanation of BIER-TE Controller (b).</t>
 <t>3.2.1.1. Added subsection for topology discovery and creation (d).</t>
 <t>3.2.1.2. Added subsection for engineered BitStrings as key novel aspect not found in BIER. (X).</t>
 <t>3.3. Added numbered list for components of BIER-TE forwarding plane (completing the comparable text from RFC8729 Section 4.2).</t>
 <t>3.4 Alvaro does not mind additional example, fixed bugs.</t>
 <t>3.5 Removed notion about using IGP BIER extensions for BIER-TE, such as BIFT address ranges. After -10 making use of BIFT clearer, it now looks to authors as if use of IGP extensions would not be beneficial, as long as we do need to use the BIER-TE controller, e.g. unlike in BIER, a BFR could not learn from the IGP information what traffic to send towards a particular BIFT-ID, but instead that is the core of what the controller needs to provide.</t>
 <t>4.2.2 Improved text to explain requirement to identify BIER-TE in the tunnel encap and compress description of use-cases (m).</t>
 <t>4.2.3 enhanced ECMP text (p).</t>
 <t>4.3. rewrote most of Encapsulation Considerations to better explain to Alvaros question re sharing or not sharing SD via BIER/BIER-TE. Added reference to I-D.ietf-bier-non-mpls-bift-encoding as a very helpful example. (f).</t>
 <t>4.3 Renamed title to "...Co-Existence with BIER" as this is what it is about and to help finding it from abstract/intro ("co-exist")  (j).</t>
 <t>4.4. Moved BIER-TE Forwarding Pseudocode here to coalesce text logically. Changed text to better compare with BIER pseudo forwarding code. Numerical list of how F-BM works for BIER-TE. Removed efficiency comparison with BIER (too difficult to provide sufficient justification, derails from focus of section) (j).</t>
 <t>4.6. (Requirements) Restructured: Removed notion of "basic" BIER-TE forwarding, simply referring to it now as "mandatory" BIER-TE forwarding. Cleaned up text to have requirements for different adjacencies in different paragraphs. (c).</t>
 <t>5. Created new main section "BIER-TE Controller operational considerations", coalesced old sections 4., 5., 7. into this new main section. No text changes. (k).</t>
 <t>5.1.9 Added new separate picture instead of referring to a picture later in text, adjusted text (r).</t>
 <t>5.3.2 Changed title to not include word "comparison" to avoid this being accounted against Alvaros concern about scattering comparison (IMHO text already has little comparison, so title was misleading) (h).</t>

 <t>co-authors internal review:</t>
 <t>4.4 Added xref to Figure 5.</t>
 <t>5.2.1 Duplicated ring picture, added visuals for described miswiring (s).</t>
 <t>5.2.2 replace "topology" with graph (wrong word).</t>
 <t>5.3.3 rewrote explanation of how to map BFR-id to SI:BP and assign them, clarified BFR-id is option. Retitled to better explain scope of section.</t>
 <t>5.3.4 Removed considerations in 5.3.4 for sharing BFR-id across BIER/BIER-TE (t), changed title to explain how BFIR/BIER-TE controller interactions need some form of identifying BFR but this does not have to be BFR-id.</t>
 <t>7. Added new security considerations (u).</t>
 <t></t>

      <t>09: Incorporated fixes for feedback from Shepherd (Xuesong Geng).</t>
      <t>    Added references for Bloom Filters and Rate Controlled Service Disciplines.</t>
      <t>    1.1 Fixed numbering of example 1 topology explanation. Improved language on second example (less abbreviating to avoid confusion about meaning).</t>
      <t>    1.2 Improved explanation of BIER-TE topology, fixed terminology of graphs (BIER-TE topology is a directed graph where the edges are the adjacencies).</t>
      <t>    2.4 Fixed and amended routing underlay explanations: detailed why no need for BFER routing underlay routing protocol extensions, but potential to re-use BIER routing underlay routing protocol extensions for non-BFER related extensions.</t>
      <t>    3.1 Added explanation for VRF and its use in adjacencies.</t>
      <t>08: Incorporated (with hopefully acceptable fixes) for Lou suggested section 2.5, TE considerations.</t>
      <t>    Fixes are primarily to the point to a) emphasize that BIER-TE does not depend on the routing underlay unless forward_routed() adjacencies are used, and b) that the allocation and tracking of resources does not explicitly have to be tied to BPs, because they are just steering labels. Instead, it would ideally come from per-hop resource management that can be maintained only via local accounting in the controller.</t>
      <t>07: Further reworking text for Lou.</t>
      <t>    Renamed BIER-PE to BIER-TE standing for "Tree Engineering" after votes from BIER WG.</t>
      <t>    Removed section 1.1 (introduced by version 06) because not considered necessary in this doc by Lou (for framework doc).</t>
      <t>    Added [RFC editor pls. remove] Section to explain name change to future reviewers.</t>
      <t>06: Concern by Lou Berger re. BIER-TE as full traffic engineering solution.</t>
      <t>    Changed title "Traffic Engineering" to "Path Engineering"</t>
      <t>    Added intro section of relationship BIER-PE to traffic engineering.</t>
      <t>    Changed "traffic engineering" term in text" to "path engineering", where appropriate</t>
      <t>    Other:</t>
      <t>    Shortened "BIER-TE Controller Host" to "BIER-TE Controller". Fixed up all instances of controller to do this.</t>
      <t>05: Review Jeffrey Zhang.</t>
      <t>    Part 2:</t>
      <t>    4.3 added note about leaf-BFER being also a propery of routing setup.</t>
      <t>    4.7 Added missing details from example to avoid confusion with routed adjacencies, also compressed explanatory text and better justification why seed is explicitly configured by controller.</t>
      <t>    4.9 added section discussing generic reuse of BP methods.</t>
      <t>    4.10 added section summarizing BP optimizations of section 4.</t>
      <t>    6. Rewrote/compressed explanation of comparison BIER/BIER-TE forwarding difference. Explained benefit of BIER-TE per-BP forwarding being independent of forwarding for other BPs.</t>
      <t>    Part 1:</t>
      <t>    Explicitly ue forwarded_connected adjcency in ECMP adjcency examples to avoid confusion.</t>
      <t>    4.3 Add picture as example for leav vs. non-leaf BFR in topology. Improved description.</t>
      <t>    4.5 Exampe for traffic that can be broadcast -> for single BP in hub&amp;spoke.</t>
      <t>    4.8.1 Simplified example picture for routed adjacency, explanatory text.</t>
      <t>    Review from Dirk Trossen:</t>
      <t>    Fixed up explanation of ICC paper vs. bloom filter.</t>
      <t>04: spell check run.</t>
      <t>    Addded remaining fixes for Sandys (Zhang Zheng) review:</t>
      <t>    4.7 Enhance ECMP explanations:</t>
      <t>    example ECMP algorithm, highlight that doc does not standardize ECMP algorithm.</t>
      <t>    Review from Dirk Trossen:</t>
      <t>    1. Added mentioning of prior work for traffic engineered paths with bloom filters.</t>
      <t>    2. Changed title from layers to components and added "BIER-TE control plane" to "BIER-TE Controller" to make it clearer, what it does.</t>
      <t>    2.2.3. Added reference to I-D.ietf-bier-multicast-http-response as an example solution.</t>
      <t>    2.3. clarified sentence about resetting BPs before sending copies (also forgot to mention DNR here).</t>
      <t>    3.4. Added text saying this section will be removed unless IESG review finds enough redeeming value in this example given how -03 introduced section 1.1 with basic examples.</t>
      <t>    7.2. Removed explicit numbers 20%/80% for number of topology bits in BIER-TE, replaced with more vague (high/low) description, because we do not have good reference material Added text saying this section will be removed unless IESG review finds enough redeeming value in this example given how -03 introduced section 1.1 with basic examples.</t>
      <t>    many typos fixed. Thanks a lot.</t>
      <t>03: Last call textual changes by authors to improve readability:</t>
      <t>    removed Wolfgang Braun as co-authors (as requested).</t>
      <t>    Improved abstract to be more explanatory. Removed mentioning of FRR (not concluded on so far).</t>
      <t>    Added new text into Introduction section because the text was too difficult to jump into
             (too many forward pointers). This primarily consists of examples and the early introduction
             of the BIER-TE Topology concept enabled by these examples.</t>
      <t>    Amended comparison to SR.</t>
      <t>    Changed syntax from [VRF] to {VRF} to indicate its optional and to make idnits happy.</t>
      <t>    Split references into normative / informative, added references.</t>
      <t>02: Refresh after IETF104 discussion: changed intended status back to standard. Reasoning:</t>
      <t>    Tighter review of standards document == ensures arch will be better prepared for possible adoption by other WGs (e.g. DetNet) or std. bodies.</t>
      <t>    Requirement against the degree of existing implementations is self defined by the WG. BIER WG seems to think it is not necessary to apply multiple interoperating implementations against an architecture level document at this time to make it qualify to go to standards track. Also, the levels of support introduced in -01 rev. should allow all BIER forwarding engines to also be able to support the base level BIER-TE forwarding.</t>
      <t>01: Added note comparing BIER and SR to also hopefully clarify BIER-TE vs. BIER comparison re. SR.</t>
      <t> - added requirements section mandating only most basic BIER-TE forwarding features as MUST.</t>
      <t> - reworked comparison with BIER forwarding section to only summarize and point to pseudocode section.</t>
      <t> - reworked pseudocode section to have one pseudocode that mirrors the BIER forwarding pseudocode to make comparison easier and a second pseudocode that shows the complete set of BIER-TE forwarding options and simplification/optimization possible vs. BIER forwarding. Removed MyBitsOfInterest (was pure optimization).</t>
      <t> - Added captions to pictures.</t>
      <t> - Part of review feedback from Sandy (Zhang Zheng) integrated.</t>
      <t>00: Changed target state to experimental (WG conclusion), updated references, mod auth association.</t>
      <t> - Source now on https://www.github.com/toerless/bier-te-arch</t> 
      <t> - Please open issues on the github for change/improvement requests to the document - in addition to posting them on the list (bier@ietf.). Thanks!.</t>
    </list>
  </t>
  <t>draft-eckert-bier-te-arch:
    <list>
      <t>06: Added overview of forwarding differences between BIER, BIER-TE.</t>
      <t>05: Author affiliation change only.</t>
      <t>04: Added comparison to Live-Live and BFIR to FRR section (Eckert).</t>
      <t>04: Removed FRR content into the new FRR draft [I-D.eckert-bier-te-frr] (Braun).</t>
      <t> - Linked FRR information to new draft in Overview/Introduction</t>
      <t> - Removed BTAFT/FRR from "Changes in the network topology"</t>
      <t> - Linked new draft in "Link/Node Failures and Recovery"</t>
      <t> - Removed FRR from "The BIER-TE Forwarding Layer"</t>
      <t> - Moved FRR section to new draft</t>
      <t> - Moved FRR parts of Pseudocode into new draft</t>
      <t> - Left only non FRR parts</t>
      <t> - removed FrrUpDown(..) and //FRR operations in ForwardBierTePacket(..)</t>
      <t> - New draft contains FrrUpDown(..) and ForwardBierTePacket(Packet) from bier-arch-03</t>
      <t> - Moved "BIER-TE and existing FRR to new draft</t>
      <t> - Moved "BIER-TE and Segment Routing" section one level up</t>
      <t> - Thus, removed "Further considerations" that only contained this section</t>
      <t> - Added Changes for version 04</t>
      <t></t>
      <t>03: Updated the FRR section.  Added examples for FRR key concepts.  Added BIER-in-BIER tunneling as option for tunnels in backup paths.  BIFT structure is expanded and contains an additional match field to support full node protection with BIER-TE FRR.</t>
      <t>03: Updated FRR section.  Explanation how BIER-in-BIER encapsulation provides P2MP protection for node failures even though the routing underlay does not provide P2MP.</t>
      <t>02: Changed the definition of BIFT to be more inline with BIER. In revs. up to -01, the idea was that a BIFT has only entries for a single BitString, and every SI and sub-domain would be a separate BIFT. In BIER, each BIFT covers all SI. This is now also how we define it in BIER-TE.</t>
      <t>02: Added <xref target="mgmt-stuff"/> to explain the use of SI, sub-domains and BFR-id in BIER-TE and to give an example how to efficiently assign bits for a large topology requiring multiple SI.</t>
      <t>02: Added further detailed for rings - how to support input from all ring nodes.</t>
      <t>01: Fixed BFIR -> BFER for section 4.3.</t>
      <t>01: Added explanation of SI, difference to BIER ECMP, consideration for Segment Routing, unicast FRR, considerations for encapsulation, explanations of BIER-TE Controller and CLI.</t>
      <t>00: Initial version.</t>
    </list>
  </t>
  </section>
  <!-- changes -->

</middle>

<back>

<references title="Normative References">
      &RFC2119;
      &RFC8279;
      &RFC8174;
      &RFC8296;
</references>


<references title="Informative References">
      &RFC4253;
      &RFC4655;
      &RFC5440;
      &RFC6241;
      &RFC7589;
      &RFC7752;
      &RFC7988;
      &RFC8253;
      &RFC8345;
      &RFC8401;
      &RFC8402;
      &RFC8444;
<!--
      &RFC2205;
      &RFC2212;
      &RFC3209;
      <?rfc include="reference.I-D.eckert-teas-bier-te-framework"?>
      <?rfc include="reference.I-D.qiang-detnet-large-scale-detnet"?>
-->

      <?rfc include="reference.I-D.ietf-teas-rfc3272bis"?>
      <?rfc include="reference.I-D.ietf-bier-multicast-http-response"?>
      <?rfc include="reference.I-D.eckert-bier-te-frr"?>
      <?rfc include="reference.I-D.ietf-roll-ccast"?>
      <?rfc include="reference.I-D.ietf-bier-te-yang"?>
      <?rfc include="reference.I-D.ietf-bier-non-mpls-bift-encoding"?>
      <reference anchor="ICC" target="https://ieeexplore.ieee.org/document/7511036">
        <front>
          <title>
            Stateless multicast switching in software defined networks
          </title>
            <author initials="M. J." surname="Reed"/>
            <author initials="M." surname="Al-Naday"/>
            <author initials="N." surname="Thomos"/>
            <author initials="D." surname="Trossen"/>
            <author initials="G." surname="Petropoulos"/>
            <author initials="S." surname="Spirou"/>
          <date month="May" year="2016"/>
        </front>
        <seriesInfo name="" value="IEEE International Conference on Communications (ICC), Kuala Lumpur, Malaysia, 2016"/>
      </reference>

      <reference anchor="RCSD94" target="https://dl.acm.org/doi/10.5555/2692227.2692232">
        <front>
          <title>
            Rate-Controlled Service Disciplines
          </title>
            <author initials="H." surname="Zhang"/>
            <author initials="D." surname="Domenico"/>
          <date month="May" year="1994"/>
        </front>
        <seriesInfo name="" value="Journal of High-Speed Networks, 1994"/>
      </reference>


      <reference anchor="Bloom70">
        <front>
          <title>Space/time trade-offs in hash coding with allowable errors</title>
          <author initials="B. H." surname="Bloom" fullname="Burton H. Bloom">
            <organization/>
          </author>
          <date month="July" year="1970"/>
        </front>
        <seriesInfo name="Comm. ACM " value="13(7):422-6"/>
        <format type="PDF" target="https://dl.acm.org/doi/10.1145/362686.362692"/>
      </reference>

      <!-- TODO change reference below as soon as its available from tool chain-->
      <!-- <?rfc include="reference.I-D.eckert-bier-te-frr"?> -->


      <!---->
</references>

</back>
</rfc>
